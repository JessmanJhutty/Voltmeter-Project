0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Fri Mar 12 15:51:18 2021
0000              5   ;--------------------------------------------------------
                  5   $name Lab5
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _time_to_phase
0000             30            public _peakVoltage2
0000             31            public _peakVoltage1
0000             32            public _peak_to_RMS
0000             33            public _timeDifference2
0000             34            public _timeDifference1
0000             35            public _halfPoint
0000             36            public _Volts_at_Pin
0000             37            public _ADC_at_Pin
0000             38            public _InitPinADC
0000             39            public _getsn
0000             40            public _LCDprint
0000             41            public _LCD_4BIT
0000             42            public _WriteCommand
0000             43            public _WriteData
0000             44            public _LCD_byte
0000             45            public _LCD_pulse
0000             46            public _waitms
0000             47            public _Timer3us
0000             48            public _InitADC
0000             49            public __c51_external_startup
0000             50            public _LCDprint_PARM_3
0000             51            public _time_to_phase_PARM_2
0000             52            public _peakVoltage2_PARM_2
0000             53            public _peakVoltage1_PARM_2
0000             54            public _getsn_PARM_2
0000             55            public _LCDprint_PARM_2
0000             56   ;--------------------------------------------------------
0000             57   ; Special Function Registers
0000             58   ;--------------------------------------------------------
0000             59   _ACC            DATA 0xe0
0000             60   _ADC0ASAH       DATA 0xb6
0000             61   _ADC0ASAL       DATA 0xb5
0000             62   _ADC0ASCF       DATA 0xa1
0000             63   _ADC0ASCT       DATA 0xc7
0000             64   _ADC0CF0        DATA 0xbc
0000             65   _ADC0CF1        DATA 0xb9
0000             66   _ADC0CF2        DATA 0xdf
0000             67   _ADC0CN0        DATA 0xe8
0000             68   _ADC0CN1        DATA 0xb2
0000             69   _ADC0CN2        DATA 0xb3
0000             70   _ADC0GTH        DATA 0xc4
0000             71   _ADC0GTL        DATA 0xc3
0000             72   _ADC0H          DATA 0xbe
0000             73   _ADC0L          DATA 0xbd
0000             74   _ADC0LTH        DATA 0xc6
0000             75   _ADC0LTL        DATA 0xc5
0000             76   _ADC0MX         DATA 0xbb
0000             77   _B              DATA 0xf0
0000             78   _CKCON0         DATA 0x8e
0000             79   _CKCON1         DATA 0xa6
0000             80   _CLEN0          DATA 0xc6
0000             81   _CLIE0          DATA 0xc7
0000             82   _CLIF0          DATA 0xe8
0000             83   _CLKSEL         DATA 0xa9
0000             84   _CLOUT0         DATA 0xd1
0000             85   _CLU0CF         DATA 0xb1
0000             86   _CLU0FN         DATA 0xaf
0000             87   _CLU0MX         DATA 0x84
0000             88   _CLU1CF         DATA 0xb3
0000             89   _CLU1FN         DATA 0xb2
0000             90   _CLU1MX         DATA 0x85
0000             91   _CLU2CF         DATA 0xb6
0000             92   _CLU2FN         DATA 0xb5
0000             93   _CLU2MX         DATA 0x91
0000             94   _CLU3CF         DATA 0xbf
0000             95   _CLU3FN         DATA 0xbe
0000             96   _CLU3MX         DATA 0xae
0000             97   _CMP0CN0        DATA 0x9b
0000             98   _CMP0CN1        DATA 0x99
0000             99   _CMP0MD         DATA 0x9d
0000            100   _CMP0MX         DATA 0x9f
0000            101   _CMP1CN0        DATA 0xbf
0000            102   _CMP1CN1        DATA 0xac
0000            103   _CMP1MD         DATA 0xab
0000            104   _CMP1MX         DATA 0xaa
0000            105   _CRC0CN0        DATA 0xce
0000            106   _CRC0CN1        DATA 0x86
0000            107   _CRC0CNT        DATA 0xd3
0000            108   _CRC0DAT        DATA 0xcb
0000            109   _CRC0FLIP       DATA 0xcf
0000            110   _CRC0IN         DATA 0xca
0000            111   _CRC0ST         DATA 0xd2
0000            112   _DAC0CF0        DATA 0x91
0000            113   _DAC0CF1        DATA 0x92
0000            114   _DAC0H          DATA 0x85
0000            115   _DAC0L          DATA 0x84
0000            116   _DAC1CF0        DATA 0x93
0000            117   _DAC1CF1        DATA 0x94
0000            118   _DAC1H          DATA 0x8a
0000            119   _DAC1L          DATA 0x89
0000            120   _DAC2CF0        DATA 0x95
0000            121   _DAC2CF1        DATA 0x96
0000            122   _DAC2H          DATA 0x8c
0000            123   _DAC2L          DATA 0x8b
0000            124   _DAC3CF0        DATA 0x9a
0000            125   _DAC3CF1        DATA 0x9c
0000            126   _DAC3H          DATA 0x8e
0000            127   _DAC3L          DATA 0x8d
0000            128   _DACGCF0        DATA 0x88
0000            129   _DACGCF1        DATA 0x98
0000            130   _DACGCF2        DATA 0xa2
0000            131   _DERIVID        DATA 0xad
0000            132   _DEVICEID       DATA 0xb5
0000            133   _DPH            DATA 0x83
0000            134   _DPL            DATA 0x82
0000            135   _EIE1           DATA 0xe6
0000            136   _EIE2           DATA 0xf3
0000            137   _EIP1           DATA 0xbb
0000            138   _EIP1H          DATA 0xee
0000            139   _EIP2           DATA 0xed
0000            140   _EIP2H          DATA 0xf6
0000            141   _EMI0CN         DATA 0xe7
0000            142   _FLKEY          DATA 0xb7
0000            143   _HFO0CAL        DATA 0xc7
0000            144   _HFO1CAL        DATA 0xd6
0000            145   _HFOCN          DATA 0xef
0000            146   _I2C0ADM        DATA 0xff
0000            147   _I2C0CN0        DATA 0xba
0000            148   _I2C0DIN        DATA 0xbc
0000            149   _I2C0DOUT       DATA 0xbb
0000            150   _I2C0FCN0       DATA 0xad
0000            151   _I2C0FCN1       DATA 0xab
0000            152   _I2C0FCT        DATA 0xf5
0000            153   _I2C0SLAD       DATA 0xbd
0000            154   _I2C0STAT       DATA 0xb9
0000            155   _IE             DATA 0xa8
0000            156   _IP             DATA 0xb8
0000            157   _IPH            DATA 0xf2
0000            158   _IT01CF         DATA 0xe4
0000            159   _LFO0CN         DATA 0xb1
0000            160   _P0             DATA 0x80
0000            161   _P0MASK         DATA 0xfe
0000            162   _P0MAT          DATA 0xfd
0000            163   _P0MDIN         DATA 0xf1
0000            164   _P0MDOUT        DATA 0xa4
0000            165   _P0SKIP         DATA 0xd4
0000            166   _P1             DATA 0x90
0000            167   _P1MASK         DATA 0xee
0000            168   _P1MAT          DATA 0xed
0000            169   _P1MDIN         DATA 0xf2
0000            170   _P1MDOUT        DATA 0xa5
0000            171   _P1SKIP         DATA 0xd5
0000            172   _P2             DATA 0xa0
0000            173   _P2MASK         DATA 0xfc
0000            174   _P2MAT          DATA 0xfb
0000            175   _P2MDIN         DATA 0xf3
0000            176   _P2MDOUT        DATA 0xa6
0000            177   _P2SKIP         DATA 0xcc
0000            178   _P3             DATA 0xb0
0000            179   _P3MDIN         DATA 0xf4
0000            180   _P3MDOUT        DATA 0x9c
0000            181   _PCA0CENT       DATA 0x9e
0000            182   _PCA0CLR        DATA 0x9c
0000            183   _PCA0CN0        DATA 0xd8
0000            184   _PCA0CPH0       DATA 0xfc
0000            185   _PCA0CPH1       DATA 0xea
0000            186   _PCA0CPH2       DATA 0xec
0000            187   _PCA0CPH3       DATA 0xf5
0000            188   _PCA0CPH4       DATA 0x85
0000            189   _PCA0CPH5       DATA 0xde
0000            190   _PCA0CPL0       DATA 0xfb
0000            191   _PCA0CPL1       DATA 0xe9
0000            192   _PCA0CPL2       DATA 0xeb
0000            193   _PCA0CPL3       DATA 0xf4
0000            194   _PCA0CPL4       DATA 0x84
0000            195   _PCA0CPL5       DATA 0xdd
0000            196   _PCA0CPM0       DATA 0xda
0000            197   _PCA0CPM1       DATA 0xdb
0000            198   _PCA0CPM2       DATA 0xdc
0000            199   _PCA0CPM3       DATA 0xae
0000            200   _PCA0CPM4       DATA 0xaf
0000            201   _PCA0CPM5       DATA 0xcc
0000            202   _PCA0H          DATA 0xfa
0000            203   _PCA0L          DATA 0xf9
0000            204   _PCA0MD         DATA 0xd9
0000            205   _PCA0POL        DATA 0x96
0000            206   _PCA0PWM        DATA 0xf7
0000            207   _PCON0          DATA 0x87
0000            208   _PCON1          DATA 0xcd
0000            209   _PFE0CN         DATA 0xc1
0000            210   _PRTDRV         DATA 0xf6
0000            211   _PSCTL          DATA 0x8f
0000            212   _PSTAT0         DATA 0xaa
0000            213   _PSW            DATA 0xd0
0000            214   _REF0CN         DATA 0xd1
0000            215   _REG0CN         DATA 0xc9
0000            216   _REVID          DATA 0xb6
0000            217   _RSTSRC         DATA 0xef
0000            218   _SBCON1         DATA 0x94
0000            219   _SBRLH1         DATA 0x96
0000            220   _SBRLL1         DATA 0x95
0000            221   _SBUF           DATA 0x99
0000            222   _SBUF0          DATA 0x99
0000            223   _SBUF1          DATA 0x92
0000            224   _SCON           DATA 0x98
0000            225   _SCON0          DATA 0x98
0000            226   _SCON1          DATA 0xc8
0000            227   _SFRPAGE        DATA 0xa7
0000            228   _SFRPGCN        DATA 0xbc
0000            229   _SFRSTACK       DATA 0xd7
0000            230   _SMB0ADM        DATA 0xd6
0000            231   _SMB0ADR        DATA 0xd7
0000            232   _SMB0CF         DATA 0xc1
0000            233   _SMB0CN0        DATA 0xc0
0000            234   _SMB0DAT        DATA 0xc2
0000            235   _SMB0FCN0       DATA 0xc3
0000            236   _SMB0FCN1       DATA 0xc4
0000            237   _SMB0FCT        DATA 0xef
0000            238   _SMB0RXLN       DATA 0xc5
0000            239   _SMB0TC         DATA 0xac
0000            240   _SMOD1          DATA 0x93
0000            241   _SP             DATA 0x81
0000            242   _SPI0CFG        DATA 0xa1
0000            243   _SPI0CKR        DATA 0xa2
0000            244   _SPI0CN0        DATA 0xf8
0000            245   _SPI0DAT        DATA 0xa3
0000            246   _SPI0FCN0       DATA 0x9a
0000            247   _SPI0FCN1       DATA 0x9b
0000            248   _SPI0FCT        DATA 0xf7
0000            249   _SPI0PCF        DATA 0xdf
0000            250   _TCON           DATA 0x88
0000            251   _TH0            DATA 0x8c
0000            252   _TH1            DATA 0x8d
0000            253   _TL0            DATA 0x8a
0000            254   _TL1            DATA 0x8b
0000            255   _TMOD           DATA 0x89
0000            256   _TMR2CN0        DATA 0xc8
0000            257   _TMR2CN1        DATA 0xfd
0000            258   _TMR2H          DATA 0xcf
0000            259   _TMR2L          DATA 0xce
0000            260   _TMR2RLH        DATA 0xcb
0000            261   _TMR2RLL        DATA 0xca
0000            262   _TMR3CN0        DATA 0x91
0000            263   _TMR3CN1        DATA 0xfe
0000            264   _TMR3H          DATA 0x95
0000            265   _TMR3L          DATA 0x94
0000            266   _TMR3RLH        DATA 0x93
0000            267   _TMR3RLL        DATA 0x92
0000            268   _TMR4CN0        DATA 0x98
0000            269   _TMR4CN1        DATA 0xff
0000            270   _TMR4H          DATA 0xa5
0000            271   _TMR4L          DATA 0xa4
0000            272   _TMR4RLH        DATA 0xa3
0000            273   _TMR4RLL        DATA 0xa2
0000            274   _TMR5CN0        DATA 0xc0
0000            275   _TMR5CN1        DATA 0xf1
0000            276   _TMR5H          DATA 0xd5
0000            277   _TMR5L          DATA 0xd4
0000            278   _TMR5RLH        DATA 0xd3
0000            279   _TMR5RLL        DATA 0xd2
0000            280   _UART0PCF       DATA 0xd9
0000            281   _UART1FCN0      DATA 0x9d
0000            282   _UART1FCN1      DATA 0xd8
0000            283   _UART1FCT       DATA 0xfa
0000            284   _UART1LIN       DATA 0x9e
0000            285   _UART1PCF       DATA 0xda
0000            286   _VDM0CN         DATA 0xff
0000            287   _WDTCN          DATA 0x97
0000            288   _XBR0           DATA 0xe1
0000            289   _XBR1           DATA 0xe2
0000            290   _XBR2           DATA 0xe3
0000            291   _XOSC0CN        DATA 0x86
0000            292   _DPTR           DATA 0x8382
0000            293   _TMR2RL         DATA 0xcbca
0000            294   _TMR3RL         DATA 0x9392
0000            295   _TMR4RL         DATA 0xa3a2
0000            296   _TMR5RL         DATA 0xd3d2
0000            297   _TMR0           DATA 0x8c8a
0000            298   _TMR1           DATA 0x8d8b
0000            299   _TMR2           DATA 0xcfce
0000            300   _TMR3           DATA 0x9594
0000            301   _TMR4           DATA 0xa5a4
0000            302   _TMR5           DATA 0xd5d4
0000            303   _SBRL1          DATA 0x9695
0000            304   _PCA0           DATA 0xfaf9
0000            305   _PCA0CP0        DATA 0xfcfb
0000            306   _PCA0CP1        DATA 0xeae9
0000            307   _PCA0CP2        DATA 0xeceb
0000            308   _PCA0CP3        DATA 0xf5f4
0000            309   _PCA0CP4        DATA 0x8584
0000            310   _PCA0CP5        DATA 0xdedd
0000            311   _ADC0ASA        DATA 0xb6b5
0000            312   _ADC0GT         DATA 0xc4c3
0000            313   _ADC0           DATA 0xbebd
0000            314   _ADC0LT         DATA 0xc6c5
0000            315   _DAC0           DATA 0x8584
0000            316   _DAC1           DATA 0x8a89
0000            317   _DAC2           DATA 0x8c8b
0000            318   _DAC3           DATA 0x8e8d
0000            319   ;--------------------------------------------------------
0000            320   ; special function bits
0000            321   ;--------------------------------------------------------
0000            322   _ACC_0          BIT 0xe0
0000            323   _ACC_1          BIT 0xe1
0000            324   _ACC_2          BIT 0xe2
0000            325   _ACC_3          BIT 0xe3
0000            326   _ACC_4          BIT 0xe4
0000            327   _ACC_5          BIT 0xe5
0000            328   _ACC_6          BIT 0xe6
0000            329   _ACC_7          BIT 0xe7
0000            330   _TEMPE          BIT 0xe8
0000            331   _ADGN0          BIT 0xe9
0000            332   _ADGN1          BIT 0xea
0000            333   _ADWINT         BIT 0xeb
0000            334   _ADBUSY         BIT 0xec
0000            335   _ADINT          BIT 0xed
0000            336   _IPOEN          BIT 0xee
0000            337   _ADEN           BIT 0xef
0000            338   _B_0            BIT 0xf0
0000            339   _B_1            BIT 0xf1
0000            340   _B_2            BIT 0xf2
0000            341   _B_3            BIT 0xf3
0000            342   _B_4            BIT 0xf4
0000            343   _B_5            BIT 0xf5
0000            344   _B_6            BIT 0xf6
0000            345   _B_7            BIT 0xf7
0000            346   _C0FIF          BIT 0xe8
0000            347   _C0RIF          BIT 0xe9
0000            348   _C1FIF          BIT 0xea
0000            349   _C1RIF          BIT 0xeb
0000            350   _C2FIF          BIT 0xec
0000            351   _C2RIF          BIT 0xed
0000            352   _C3FIF          BIT 0xee
0000            353   _C3RIF          BIT 0xef
0000            354   _D1SRC0         BIT 0x88
0000            355   _D1SRC1         BIT 0x89
0000            356   _D1AMEN         BIT 0x8a
0000            357   _D01REFSL       BIT 0x8b
0000            358   _D3SRC0         BIT 0x8c
0000            359   _D3SRC1         BIT 0x8d
0000            360   _D3AMEN         BIT 0x8e
0000            361   _D23REFSL       BIT 0x8f
0000            362   _D0UDIS         BIT 0x98
0000            363   _D1UDIS         BIT 0x99
0000            364   _D2UDIS         BIT 0x9a
0000            365   _D3UDIS         BIT 0x9b
0000            366   _EX0            BIT 0xa8
0000            367   _ET0            BIT 0xa9
0000            368   _EX1            BIT 0xaa
0000            369   _ET1            BIT 0xab
0000            370   _ES0            BIT 0xac
0000            371   _ET2            BIT 0xad
0000            372   _ESPI0          BIT 0xae
0000            373   _EA             BIT 0xaf
0000            374   _PX0            BIT 0xb8
0000            375   _PT0            BIT 0xb9
0000            376   _PX1            BIT 0xba
0000            377   _PT1            BIT 0xbb
0000            378   _PS0            BIT 0xbc
0000            379   _PT2            BIT 0xbd
0000            380   _PSPI0          BIT 0xbe
0000            381   _P0_0           BIT 0x80
0000            382   _P0_1           BIT 0x81
0000            383   _P0_2           BIT 0x82
0000            384   _P0_3           BIT 0x83
0000            385   _P0_4           BIT 0x84
0000            386   _P0_5           BIT 0x85
0000            387   _P0_6           BIT 0x86
0000            388   _P0_7           BIT 0x87
0000            389   _P1_0           BIT 0x90
0000            390   _P1_1           BIT 0x91
0000            391   _P1_2           BIT 0x92
0000            392   _P1_3           BIT 0x93
0000            393   _P1_4           BIT 0x94
0000            394   _P1_5           BIT 0x95
0000            395   _P1_6           BIT 0x96
0000            396   _P1_7           BIT 0x97
0000            397   _P2_0           BIT 0xa0
0000            398   _P2_1           BIT 0xa1
0000            399   _P2_2           BIT 0xa2
0000            400   _P2_3           BIT 0xa3
0000            401   _P2_4           BIT 0xa4
0000            402   _P2_5           BIT 0xa5
0000            403   _P2_6           BIT 0xa6
0000            404   _P3_0           BIT 0xb0
0000            405   _P3_1           BIT 0xb1
0000            406   _P3_2           BIT 0xb2
0000            407   _P3_3           BIT 0xb3
0000            408   _P3_4           BIT 0xb4
0000            409   _P3_7           BIT 0xb7
0000            410   _CCF0           BIT 0xd8
0000            411   _CCF1           BIT 0xd9
0000            412   _CCF2           BIT 0xda
0000            413   _CCF3           BIT 0xdb
0000            414   _CCF4           BIT 0xdc
0000            415   _CCF5           BIT 0xdd
0000            416   _CR             BIT 0xde
0000            417   _CF             BIT 0xdf
0000            418   _PARITY         BIT 0xd0
0000            419   _F1             BIT 0xd1
0000            420   _OV             BIT 0xd2
0000            421   _RS0            BIT 0xd3
0000            422   _RS1            BIT 0xd4
0000            423   _F0             BIT 0xd5
0000            424   _AC             BIT 0xd6
0000            425   _CY             BIT 0xd7
0000            426   _RI             BIT 0x98
0000            427   _TI             BIT 0x99
0000            428   _RB8            BIT 0x9a
0000            429   _TB8            BIT 0x9b
0000            430   _REN            BIT 0x9c
0000            431   _CE             BIT 0x9d
0000            432   _SMODE          BIT 0x9e
0000            433   _RI1            BIT 0xc8
0000            434   _TI1            BIT 0xc9
0000            435   _RBX1           BIT 0xca
0000            436   _TBX1           BIT 0xcb
0000            437   _REN1           BIT 0xcc
0000            438   _PERR1          BIT 0xcd
0000            439   _OVR1           BIT 0xce
0000            440   _SI             BIT 0xc0
0000            441   _ACK            BIT 0xc1
0000            442   _ARBLOST        BIT 0xc2
0000            443   _ACKRQ          BIT 0xc3
0000            444   _STO            BIT 0xc4
0000            445   _STA            BIT 0xc5
0000            446   _TXMODE         BIT 0xc6
0000            447   _MASTER         BIT 0xc7
0000            448   _SPIEN          BIT 0xf8
0000            449   _TXNF           BIT 0xf9
0000            450   _NSSMD0         BIT 0xfa
0000            451   _NSSMD1         BIT 0xfb
0000            452   _RXOVRN         BIT 0xfc
0000            453   _MODF           BIT 0xfd
0000            454   _WCOL           BIT 0xfe
0000            455   _SPIF           BIT 0xff
0000            456   _IT0            BIT 0x88
0000            457   _IE0            BIT 0x89
0000            458   _IT1            BIT 0x8a
0000            459   _IE1            BIT 0x8b
0000            460   _TR0            BIT 0x8c
0000            461   _TF0            BIT 0x8d
0000            462   _TR1            BIT 0x8e
0000            463   _TF1            BIT 0x8f
0000            464   _T2XCLK0        BIT 0xc8
0000            465   _T2XCLK1        BIT 0xc9
0000            466   _TR2            BIT 0xca
0000            467   _T2SPLIT        BIT 0xcb
0000            468   _TF2CEN         BIT 0xcc
0000            469   _TF2LEN         BIT 0xcd
0000            470   _TF2L           BIT 0xce
0000            471   _TF2H           BIT 0xcf
0000            472   _T4XCLK0        BIT 0x98
0000            473   _T4XCLK1        BIT 0x99
0000            474   _TR4            BIT 0x9a
0000            475   _T4SPLIT        BIT 0x9b
0000            476   _TF4CEN         BIT 0x9c
0000            477   _TF4LEN         BIT 0x9d
0000            478   _TF4L           BIT 0x9e
0000            479   _TF4H           BIT 0x9f
0000            480   _T5XCLK0        BIT 0xc0
0000            481   _T5XCLK1        BIT 0xc1
0000            482   _TR5            BIT 0xc2
0000            483   _T5SPLIT        BIT 0xc3
0000            484   _TF5CEN         BIT 0xc4
0000            485   _TF5LEN         BIT 0xc5
0000            486   _TF5L           BIT 0xc6
0000            487   _TF5H           BIT 0xc7
0000            488   _RIE            BIT 0xd8
0000            489   _RXTO0          BIT 0xd9
0000            490   _RXTO1          BIT 0xda
0000            491   _RFRQ           BIT 0xdb
0000            492   _TIE            BIT 0xdc
0000            493   _TXHOLD         BIT 0xdd
0000            494   _TXNF1          BIT 0xde
0000            495   _TFRQ           BIT 0xdf
0000            496   ;--------------------------------------------------------
0000            497   ; overlayable register banks
0000            498   ;--------------------------------------------------------
0000            499            rbank0 segment data overlay
0000            500   ;--------------------------------------------------------
0000            501   ; internal ram data
0000            502   ;--------------------------------------------------------
0000            503            rseg R_DSEG
0000            504   _LCDprint_PARM_2:
0000            505            ds 1
0001            506   _getsn_PARM_2:
0001            507            ds 2
0003            508   _getsn_buff_1_63:
0003            509            ds 3
0006            510   _getsn_sloc0_1_0:
0006            511            ds 2
0008            512   _peakVoltage1_PARM_2:
0008            513            ds 4
000C            514   _peakVoltage2_PARM_2:
000C            515            ds 4
0010            516   _time_to_phase_PARM_2:
0010            517            ds 4
0014            518   _main_v_1_106:
0014            519            ds 16
0024            520   _main_t_1_106:
0024            521            ds 4
0028            522   _main_t1_1_106:
0028            523            ds 4
002C            524   _main_halfPeriod_1_106:
002C            525            ds 4
0030            526   _main_phase1_1_106:
0030            527            ds 4
0034            528   _main_phase2_1_106:
0034            529            ds 4
0038            530   _main_rms_1_106:
0038            531            ds 8
0040            532   _main_frequency_1_106:
0040            533            ds 4
0044            534   _main_sloc0_1_0:
0044            535            ds 4
0048            536   _main_sloc1_1_0:
0048            537            ds 4
004C            538   ;--------------------------------------------------------
004C            539   ; overlayable items in internal ram 
004C            540   ;--------------------------------------------------------
0000            541            rseg    R_OSEG
0000            542            rseg    R_OSEG
0000            543   _InitPinADC_PARM_2:
0000            544            ds 1
0001            545            rseg    R_OSEG
0001            546   ;--------------------------------------------------------
0001            547   ; indirectly addressable internal ram data
0001            548   ;--------------------------------------------------------
0000            549            rseg R_ISEG
0000            550   ;--------------------------------------------------------
0000            551   ; absolute internal ram data
0000            552   ;--------------------------------------------------------
0000            553            DSEG
0000            554   ;--------------------------------------------------------
0000            555   ; bit data
0000            556   ;--------------------------------------------------------
0000            557            rseg R_BSEG
0000            558   _LCDprint_PARM_3:
0000            559            DBIT    1
0001            560   ;--------------------------------------------------------
0001            561   ; paged external ram data
0001            562   ;--------------------------------------------------------
0000            563            rseg R_PSEG
0000            564   ;--------------------------------------------------------
0000            565   ; external ram data
0000            566   ;--------------------------------------------------------
0000            567            rseg R_XSEG
0000            568   _main_buff_1_106:
0000            569            ds 17
0011            570   _main_angle_1_106:
0011            571            ds 17
0022            572   ;--------------------------------------------------------
0022            573   ; absolute external ram data
0022            574   ;--------------------------------------------------------
0000            575            XSEG
0000            576   ;--------------------------------------------------------
0000            577   ; external initialized ram data
0000            578   ;--------------------------------------------------------
0000            579            rseg R_IXSEG
0000            580            rseg R_HOME
0000            581            rseg R_GSINIT
0000            582            rseg R_CSEG
0000            583   ;--------------------------------------------------------
0000            584   ; Reset entry point and interrupt vectors
0000            585   ;--------------------------------------------------------
0000            586            CSEG at 0x0000
0000 020100     587            ljmp    _crt0
0003            588   ;--------------------------------------------------------
0003            589   ; global & static initialisations
0003            590   ;--------------------------------------------------------
0000            591            rseg R_HOME
0000            592            rseg R_GSINIT
0000            593            rseg R_GSINIT
0000            594   ;--------------------------------------------------------
0000            595   ; data variables initialization
0000            596   ;--------------------------------------------------------
0000            597            rseg R_DINIT
0000            598            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            599   ;--------------------------------------------------------
0000            600   ; code
0000            601   ;--------------------------------------------------------
0000            602            rseg R_CSEG
0000            603   ;------------------------------------------------------------
0000            604   ;Allocation info for local variables in function '_c51_external_startup'
0000            605   ;------------------------------------------------------------
0000            606   ;------------------------------------------------------------
0000            607   ;        D:\ELEC 291\Lab5\Lab5.c:27: char _c51_external_startup (void)
0000            608   ;        -----------------------------------------
0000            609   ;         function _c51_external_startup
0000            610   ;        -----------------------------------------
0000            611   __c51_external_startup:
0000            612            using   0
0000            613   ;        D:\ELEC 291\Lab5\Lab5.c:30: SFRPAGE = 0x00;
0000 75A700     614            mov     _SFRPAGE,#0x00
0003            615   ;        D:\ELEC 291\Lab5\Lab5.c:31: WDTCN = 0xDE; //First key
0003 7597DE     616            mov     _WDTCN,#0xDE
0006            617   ;        D:\ELEC 291\Lab5\Lab5.c:32: WDTCN = 0xAD; //Second key
0006 7597AD     618            mov     _WDTCN,#0xAD
0009            619   ;        D:\ELEC 291\Lab5\Lab5.c:34: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     620            mov     _VDM0CN,#0x80
000C            621   ;        D:\ELEC 291\Lab5\Lab5.c:35: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     622            mov     _RSTSRC,#0x06
000F            623   ;        D:\ELEC 291\Lab5\Lab5.c:42: SFRPAGE = 0x10;
000F 75A710     624            mov     _SFRPAGE,#0x10
0012            625   ;        D:\ELEC 291\Lab5\Lab5.c:43: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     626            mov     _PFE0CN,#0x20
0015            627   ;        D:\ELEC 291\Lab5\Lab5.c:44: SFRPAGE = 0x00;
0015 75A700     628            mov     _SFRPAGE,#0x00
0018            629   ;        D:\ELEC 291\Lab5\Lab5.c:65: CLKSEL = 0x00;
0018 75A900     630            mov     _CLKSEL,#0x00
001B            631   ;        D:\ELEC 291\Lab5\Lab5.c:66: CLKSEL = 0x00;
001B 75A900     632            mov     _CLKSEL,#0x00
001E            633   ;        D:\ELEC 291\Lab5\Lab5.c:67: while ((CLKSEL & 0x80) == 0);
001E            634   L002001?:
001E E5A9       635            mov     a,_CLKSEL
0020 30E768     636            jnb     acc.7,L002001?
0023            637   ;        D:\ELEC 291\Lab5\Lab5.c:68: CLKSEL = 0x03;
0023 75A903     638            mov     _CLKSEL,#0x03
0026            639   ;        D:\ELEC 291\Lab5\Lab5.c:69: CLKSEL = 0x03;
0026 75A903     640            mov     _CLKSEL,#0x03
0029            641   ;        D:\ELEC 291\Lab5\Lab5.c:70: while ((CLKSEL & 0x80) == 0);
0029            642   L002004?:
0029 E5A9       643            mov     a,_CLKSEL
002B 30E7E8     644            jnb     acc.7,L002004?
002E            645   ;        D:\ELEC 291\Lab5\Lab5.c:75: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     646            orl     _P0MDOUT,#0x10
0031            647   ;        D:\ELEC 291\Lab5\Lab5.c:76: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     648            mov     _XBR0,#0x01
0034            649   ;        D:\ELEC 291\Lab5\Lab5.c:77: XBR1     = 0X00;
0034 75E200     650            mov     _XBR1,#0x00
0037            651   ;        D:\ELEC 291\Lab5\Lab5.c:78: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     652            mov     _XBR2,#0x40
003A            653   ;        D:\ELEC 291\Lab5\Lab5.c:84: SCON0 = 0x10;
003A 759810     654            mov     _SCON0,#0x10
003D            655   ;        D:\ELEC 291\Lab5\Lab5.c:85: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     656            mov     _TH1,#0xE6
0040            657   ;        D:\ELEC 291\Lab5\Lab5.c:86: TL1 = TH1;      // Init Timer1
0040 858D8B     658            mov     _TL1,_TH1
0043            659   ;        D:\ELEC 291\Lab5\Lab5.c:87: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     660            anl     _TMOD,#0x0F
0046            661   ;        D:\ELEC 291\Lab5\Lab5.c:88: TMOD |=  0x20;                       
0046 438920     662            orl     _TMOD,#0x20
0049            663   ;        D:\ELEC 291\Lab5\Lab5.c:89: TR1 = 1; // START Timer1
0049 D28E       664            setb    _TR1
004B            665   ;        D:\ELEC 291\Lab5\Lab5.c:90: TI = 1;  // Indicate TX0 ready
004B D299       666            setb    _TI
004D            667   ;        D:\ELEC 291\Lab5\Lab5.c:92: return 0;
004D 758200     668            mov     dpl,#0x00
0050 22         669            ret
0051            670   ;------------------------------------------------------------
0051            671   ;Allocation info for local variables in function 'InitADC'
0051            672   ;------------------------------------------------------------
0051            673   ;------------------------------------------------------------
0051            674   ;        D:\ELEC 291\Lab5\Lab5.c:95: void InitADC (void)
0051            675   ;        -----------------------------------------
0051            676   ;         function InitADC
0051            677   ;        -----------------------------------------
0051            678   _InitADC:
0051            679   ;        D:\ELEC 291\Lab5\Lab5.c:97: SFRPAGE = 0x00;
0051 75A700     680            mov     _SFRPAGE,#0x00
0054            681   ;        D:\ELEC 291\Lab5\Lab5.c:98: ADEN=0; // Disable ADC
0054 C2EF       682            clr     _ADEN
0056            683   ;        D:\ELEC 291\Lab5\Lab5.c:103: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     684            mov     _ADC0CN1,#0x80
0059            685   ;        D:\ELEC 291\Lab5\Lab5.c:107: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     686            mov     _ADC0CF0,#0x20
005C            687   ;        D:\ELEC 291\Lab5\Lab5.c:111: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     688            mov     _ADC0CF1,#0x1E
005F            689   ;        D:\ELEC 291\Lab5\Lab5.c:120: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     690            mov     _ADC0CN0,#0x00
0062            691   ;        D:\ELEC 291\Lab5\Lab5.c:125: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     692            mov     _ADC0CF2,#0x3F
0065            693   ;        D:\ELEC 291\Lab5\Lab5.c:129: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     694            mov     _ADC0CN2,#0x00
0068            695   ;        D:\ELEC 291\Lab5\Lab5.c:131: ADEN=1; // Enable ADC
0068 D2EF       696            setb    _ADEN
006A 22         697            ret
006B            698   ;------------------------------------------------------------
006B            699   ;Allocation info for local variables in function 'Timer3us'
006B            700   ;------------------------------------------------------------
006B            701   ;us                        Allocated to registers r2 
006B            702   ;i                         Allocated to registers r3 
006B            703   ;------------------------------------------------------------
006B            704   ;        D:\ELEC 291\Lab5\Lab5.c:135: void Timer3us(unsigned char us)
006B            705   ;        -----------------------------------------
006B            706   ;         function Timer3us
006B            707   ;        -----------------------------------------
006B            708   _Timer3us:
006B AA82       709            mov     r2,dpl
006D            710   ;        D:\ELEC 291\Lab5\Lab5.c:140: CKCON0|=0b_0100_0000;
006D 438E40     711            orl     _CKCON0,#0x40
0070            712   ;        D:\ELEC 291\Lab5\Lab5.c:142: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     713            mov     _TMR3RL,#0xB8
0073 7593FF     714            mov     (_TMR3RL >> 8),#0xFF
0076            715   ;        D:\ELEC 291\Lab5\Lab5.c:143: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     716            mov     _TMR3,_TMR3RL
0079 859395     717            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            718   ;        D:\ELEC 291\Lab5\Lab5.c:145: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     719            mov     _TMR3CN0,#0x04
007F            720   ;        D:\ELEC 291\Lab5\Lab5.c:146: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       721            mov     r3,#0x00
0081            722   L004004?:
0081 C3         723            clr     c
0082 EB         724            mov     a,r3
0083 9A         725            subb    a,r2
0084 5001       726            jnc     L004007?
0086            727   ;        D:\ELEC 291\Lab5\Lab5.c:148: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            728   L004001?:
0086 E591       729            mov     a,_TMR3CN0
0088 30E7E8     730            jnb     acc.7,L004001?
008B            731   ;        D:\ELEC 291\Lab5\Lab5.c:149: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     732            anl     _TMR3CN0,#0x7F
008E            733   ;        D:\ELEC 291\Lab5\Lab5.c:146: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         734            inc     r3
008F 8001       735            sjmp    L004004?
0091            736   L004007?:
0091            737   ;        D:\ELEC 291\Lab5\Lab5.c:151: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     738            mov     _TMR3CN0,#0x00
0094 22         739            ret
0095            740   ;------------------------------------------------------------
0095            741   ;Allocation info for local variables in function 'waitms'
0095            742   ;------------------------------------------------------------
0095            743   ;ms                        Allocated to registers r2 r3 
0095            744   ;j                         Allocated to registers r4 r5 
0095            745   ;k                         Allocated to registers r6 
0095            746   ;------------------------------------------------------------
0095            747   ;        D:\ELEC 291\Lab5\Lab5.c:154: void waitms (unsigned int ms)
0095            748   ;        -----------------------------------------
0095            749   ;         function waitms
0095            750   ;        -----------------------------------------
0095            751   _waitms:
0095 AA82       752            mov     r2,dpl
0097 AB83       753            mov     r3,dph
0099            754   ;        D:\ELEC 291\Lab5\Lab5.c:158: for(j=0; j<ms; j++)
0099 7C00       755            mov     r4,#0x00
009B 7D00       756            mov     r5,#0x00
009D            757   L005005?:
009D C3         758            clr     c
009E EC         759            mov     a,r4
009F 9A         760            subb    a,r2
00A0 ED         761            mov     a,r5
00A1 9B         762            subb    a,r3
00A2 5001       763            jnc     L005009?
00A4            764   ;        D:\ELEC 291\Lab5\Lab5.c:159: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       765            mov     r6,#0x00
00A6            766   L005001?:
00A6 BE0428     767            cjne    r6,#0x04,L005018?
00A9            768   L005018?:
00A9 5001       769            jnc     L005007?
00AB 7582FA     770            mov     dpl,#0xFA
00AE C002       771            push    ar2
00B0 C003       772            push    ar3
00B2 C004       773            push    ar4
00B4 C005       774            push    ar5
00B6 C006       775            push    ar6
00B8 120100     776            lcall   _Timer3us
00BB D006       777            pop     ar6
00BD D005       778            pop     ar5
00BF D004       779            pop     ar4
00C1 D003       780            pop     ar3
00C3 D002       781            pop     ar2
00C5 0E         782            inc     r6
00C6 8001       783            sjmp    L005001?
00C8            784   L005007?:
00C8            785   ;        D:\ELEC 291\Lab5\Lab5.c:158: for(j=0; j<ms; j++)
00C8 0C         786            inc     r4
00C9 BC0068     787            cjne    r4,#0x00,L005005?
00CC 0D         788            inc     r5
00CD 8001       789            sjmp    L005005?
00CF            790   L005009?:
00CF 22         791            ret
00D0            792   ;------------------------------------------------------------
00D0            793   ;Allocation info for local variables in function 'LCD_pulse'
00D0            794   ;------------------------------------------------------------
00D0            795   ;------------------------------------------------------------
00D0            796   ;        D:\ELEC 291\Lab5\Lab5.c:162: void LCD_pulse (void)
00D0            797   ;        -----------------------------------------
00D0            798   ;         function LCD_pulse
00D0            799   ;        -----------------------------------------
00D0            800   _LCD_pulse:
00D0            801   ;        D:\ELEC 291\Lab5\Lab5.c:164: LCD_E=1;
00D0 D296       802            setb    _P1_6
00D2            803   ;        D:\ELEC 291\Lab5\Lab5.c:165: Timer3us(40);
00D2 758228     804            mov     dpl,#0x28
00D5 120100     805            lcall   _Timer3us
00D8            806   ;        D:\ELEC 291\Lab5\Lab5.c:166: LCD_E=0;
00D8 C296       807            clr     _P1_6
00DA 22         808            ret
00DB            809   ;------------------------------------------------------------
00DB            810   ;Allocation info for local variables in function 'LCD_byte'
00DB            811   ;------------------------------------------------------------
00DB            812   ;x                         Allocated to registers r2 
00DB            813   ;------------------------------------------------------------
00DB            814   ;        D:\ELEC 291\Lab5\Lab5.c:169: void LCD_byte (unsigned char x)
00DB            815   ;        -----------------------------------------
00DB            816   ;         function LCD_byte
00DB            817   ;        -----------------------------------------
00DB            818   _LCD_byte:
00DB AA82       819            mov     r2,dpl
00DD            820   ;        D:\ELEC 291\Lab5\Lab5.c:172: ACC=x; //Send high nible
00DD 8AE0       821            mov     _ACC,r2
00DF            822   ;        D:\ELEC 291\Lab5\Lab5.c:173: LCD_D7=ACC_7;
00DF A2E7       823            mov     c,_ACC_7
00E1 9286       824            mov     _P0_6,c
00E3            825   ;        D:\ELEC 291\Lab5\Lab5.c:174: LCD_D6=ACC_6;
00E3 A2E6       826            mov     c,_ACC_6
00E5 9287       827            mov     _P0_7,c
00E7            828   ;        D:\ELEC 291\Lab5\Lab5.c:175: LCD_D5=ACC_5;
00E7 A2E5       829            mov     c,_ACC_5
00E9 9290       830            mov     _P1_0,c
00EB            831   ;        D:\ELEC 291\Lab5\Lab5.c:176: LCD_D4=ACC_4;
00EB A2E4       832            mov     c,_ACC_4
00ED 9291       833            mov     _P1_1,c
00EF            834   ;        D:\ELEC 291\Lab5\Lab5.c:177: LCD_pulse();
00EF C002       835            push    ar2
00F1 120100     836            lcall   _LCD_pulse
00F4            837   ;        D:\ELEC 291\Lab5\Lab5.c:178: Timer3us(40);
00F4 758228     838            mov     dpl,#0x28
00F7 120100     839            lcall   _Timer3us
00FA D002       840            pop     ar2
00FC            841   ;        D:\ELEC 291\Lab5\Lab5.c:179: ACC=x; //Send low nible
00FC 8AE0       842            mov     _ACC,r2
00FE            843   ;        D:\ELEC 291\Lab5\Lab5.c:180: LCD_D7=ACC_3;
00FE A2E3       844            mov     c,_ACC_3
0100 9286       845            mov     _P0_6,c
0102            846   ;        D:\ELEC 291\Lab5\Lab5.c:181: LCD_D6=ACC_2;
0102 A2E2       847            mov     c,_ACC_2
0104 9287       848            mov     _P0_7,c
0106            849   ;        D:\ELEC 291\Lab5\Lab5.c:182: LCD_D5=ACC_1;
0106 A2E1       850            mov     c,_ACC_1
0108 9290       851            mov     _P1_0,c
010A            852   ;        D:\ELEC 291\Lab5\Lab5.c:183: LCD_D4=ACC_0;
010A A2E0       853            mov     c,_ACC_0
010C 9291       854            mov     _P1_1,c
010E            855   ;        D:\ELEC 291\Lab5\Lab5.c:184: LCD_pulse();
010E 020100     856            ljmp    _LCD_pulse
0111            857   ;------------------------------------------------------------
0111            858   ;Allocation info for local variables in function 'WriteData'
0111            859   ;------------------------------------------------------------
0111            860   ;x                         Allocated to registers r2 
0111            861   ;------------------------------------------------------------
0111            862   ;        D:\ELEC 291\Lab5\Lab5.c:187: void WriteData (unsigned char x)
0111            863   ;        -----------------------------------------
0111            864   ;         function WriteData
0111            865   ;        -----------------------------------------
0111            866   _WriteData:
0111 AA82       867            mov     r2,dpl
0113            868   ;        D:\ELEC 291\Lab5\Lab5.c:189: LCD_RS=1;
0113 D2A0       869            setb    _P2_0
0115            870   ;        D:\ELEC 291\Lab5\Lab5.c:190: LCD_byte(x);
0115 8A82       871            mov     dpl,r2
0117 120100     872            lcall   _LCD_byte
011A            873   ;        D:\ELEC 291\Lab5\Lab5.c:191: waitms(2);
011A 900002     874            mov     dptr,#0x0002
011D 020100     875            ljmp    _waitms
0120            876   ;------------------------------------------------------------
0120            877   ;Allocation info for local variables in function 'WriteCommand'
0120            878   ;------------------------------------------------------------
0120            879   ;x                         Allocated to registers r2 
0120            880   ;------------------------------------------------------------
0120            881   ;        D:\ELEC 291\Lab5\Lab5.c:194: void WriteCommand (unsigned char x)
0120            882   ;        -----------------------------------------
0120            883   ;         function WriteCommand
0120            884   ;        -----------------------------------------
0120            885   _WriteCommand:
0120 AA82       886            mov     r2,dpl
0122            887   ;        D:\ELEC 291\Lab5\Lab5.c:196: LCD_RS=0;
0122 C2A0       888            clr     _P2_0
0124            889   ;        D:\ELEC 291\Lab5\Lab5.c:197: LCD_byte(x);
0124 8A82       890            mov     dpl,r2
0126 120100     891            lcall   _LCD_byte
0129            892   ;        D:\ELEC 291\Lab5\Lab5.c:198: waitms(5);
0129 900005     893            mov     dptr,#0x0005
012C 020100     894            ljmp    _waitms
012F            895   ;------------------------------------------------------------
012F            896   ;Allocation info for local variables in function 'LCD_4BIT'
012F            897   ;------------------------------------------------------------
012F            898   ;------------------------------------------------------------
012F            899   ;        D:\ELEC 291\Lab5\Lab5.c:201: void LCD_4BIT (void)
012F            900   ;        -----------------------------------------
012F            901   ;         function LCD_4BIT
012F            902   ;        -----------------------------------------
012F            903   _LCD_4BIT:
012F            904   ;        D:\ELEC 291\Lab5\Lab5.c:203: LCD_E=0; // Resting state of LCD's enable is zero
012F C296       905            clr     _P1_6
0131            906   ;        D:\ELEC 291\Lab5\Lab5.c:204: LCD_RW=0; // We are only writing to the LCD in this program
0131 C297       907            clr     _P1_7
0133            908   ;        D:\ELEC 291\Lab5\Lab5.c:205: waitms(20);
0133 900014     909            mov     dptr,#0x0014
0136 120100     910            lcall   _waitms
0139            911   ;        D:\ELEC 291\Lab5\Lab5.c:207: WriteCommand(0x33);
0139 758233     912            mov     dpl,#0x33
013C 120100     913            lcall   _WriteCommand
013F            914   ;        D:\ELEC 291\Lab5\Lab5.c:208: WriteCommand(0x33);
013F 758233     915            mov     dpl,#0x33
0142 120100     916            lcall   _WriteCommand
0145            917   ;        D:\ELEC 291\Lab5\Lab5.c:209: WriteCommand(0x32); // Change to 4-bit mode
0145 758232     918            mov     dpl,#0x32
0148 120100     919            lcall   _WriteCommand
014B            920   ;        D:\ELEC 291\Lab5\Lab5.c:212: WriteCommand(0x28);
014B 758228     921            mov     dpl,#0x28
014E 120100     922            lcall   _WriteCommand
0151            923   ;        D:\ELEC 291\Lab5\Lab5.c:213: WriteCommand(0x0c);
0151 75820C     924            mov     dpl,#0x0C
0154 120100     925            lcall   _WriteCommand
0157            926   ;        D:\ELEC 291\Lab5\Lab5.c:214: WriteCommand(0x01); // Clear screen command (takes some time)
0157 758201     927            mov     dpl,#0x01
015A 120100     928            lcall   _WriteCommand
015D            929   ;        D:\ELEC 291\Lab5\Lab5.c:215: waitms(20); // Wait for clear screen command to finsih.
015D 900014     930            mov     dptr,#0x0014
0160 020100     931            ljmp    _waitms
0163            932   ;------------------------------------------------------------
0163            933   ;Allocation info for local variables in function 'LCDprint'
0163            934   ;------------------------------------------------------------
0163            935   ;line                      Allocated with name '_LCDprint_PARM_2'
0163            936   ;string                    Allocated to registers r2 r3 r4 
0163            937   ;j                         Allocated to registers r5 r6 
0163            938   ;------------------------------------------------------------
0163            939   ;        D:\ELEC 291\Lab5\Lab5.c:218: void LCDprint(char * string, unsigned char line, bit clear)
0163            940   ;        -----------------------------------------
0163            941   ;         function LCDprint
0163            942   ;        -----------------------------------------
0163            943   _LCDprint:
0163 AA82       944            mov     r2,dpl
0165 AB83       945            mov     r3,dph
0167 ACF0       946            mov     r4,b
0169            947   ;        D:\ELEC 291\Lab5\Lab5.c:222: WriteCommand(line==2?0xc0:0x80);
0169 7402       948            mov     a,#0x02
016B B5E0E8     949            cjne    a,_LCDprint_PARM_2,L011013?
016E 7DC0       950            mov     r5,#0xC0
0170 8001       951            sjmp    L011014?
0172            952   L011013?:
0172 7D80       953            mov     r5,#0x80
0174            954   L011014?:
0174 8D82       955            mov     dpl,r5
0176 C002       956            push    ar2
0178 C003       957            push    ar3
017A C004       958            push    ar4
017C 120100     959            lcall   _WriteCommand
017F            960   ;        D:\ELEC 291\Lab5\Lab5.c:223: waitms(5);
017F 900005     961            mov     dptr,#0x0005
0182 120100     962            lcall   _waitms
0185 D004       963            pop     ar4
0187 D003       964            pop     ar3
0189 D002       965            pop     ar2
018B            966   ;        D:\ELEC 291\Lab5\Lab5.c:224: for(j=0; string[j]!=0; j++)        WriteData(string[j]);// Write the message
018B 7D00       967            mov     r5,#0x00
018D 7E00       968            mov     r6,#0x00
018F            969   L011003?:
018F ED         970            mov     a,r5
0190 2A         971            add     a,r2
0191 FF         972            mov     r7,a
0192 EE         973            mov     a,r6
0193 3B         974            addc    a,r3
0194 F8         975            mov     r0,a
0195 8C01       976            mov     ar1,r4
0197 8F82       977            mov     dpl,r7
0199 8883       978            mov     dph,r0
019B 89F0       979            mov     b,r1
019D 120100     980            lcall   __gptrget
01A0 FF         981            mov     r7,a
01A1 6001       982            jz      L011006?
01A3 8F82       983            mov     dpl,r7
01A5 C002       984            push    ar2
01A7 C003       985            push    ar3
01A9 C004       986            push    ar4
01AB C005       987            push    ar5
01AD C006       988            push    ar6
01AF 120100     989            lcall   _WriteData
01B2 D006       990            pop     ar6
01B4 D005       991            pop     ar5
01B6 D004       992            pop     ar4
01B8 D003       993            pop     ar3
01BA D002       994            pop     ar2
01BC 0D         995            inc     r5
01BD BD0068     996            cjne    r5,#0x00,L011003?
01C0 0E         997            inc     r6
01C1 8001       998            sjmp    L011003?
01C3            999   L011006?:
01C3           1000   ;        D:\ELEC 291\Lab5\Lab5.c:225: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
01C3 306028    1001            jnb     _LCDprint_PARM_3,L011011?
01C6 8D02      1002            mov     ar2,r5
01C8 8E03      1003            mov     ar3,r6
01CA           1004   L011007?:
01CA C3        1005            clr     c
01CB EA        1006            mov     a,r2
01CC 9410      1007            subb    a,#0x10
01CE EB        1008            mov     a,r3
01CF 6480      1009            xrl     a,#0x80
01D1 9480      1010            subb    a,#0x80
01D3 5001      1011            jnc     L011011?
01D5 758220    1012            mov     dpl,#0x20
01D8 C002      1013            push    ar2
01DA C003      1014            push    ar3
01DC 120100    1015            lcall   _WriteData
01DF D003      1016            pop     ar3
01E1 D002      1017            pop     ar2
01E3 0A        1018            inc     r2
01E4 BA0068    1019            cjne    r2,#0x00,L011007?
01E7 0B        1020            inc     r3
01E8 8001      1021            sjmp    L011007?
01EA           1022   L011011?:
01EA 22        1023            ret
01EB           1024   ;------------------------------------------------------------
01EB           1025   ;Allocation info for local variables in function 'getsn'
01EB           1026   ;------------------------------------------------------------
01EB           1027   ;len                       Allocated with name '_getsn_PARM_2'
01EB           1028   ;buff                      Allocated with name '_getsn_buff_1_63'
01EB           1029   ;j                         Allocated with name '_getsn_sloc0_1_0'
01EB           1030   ;c                         Allocated to registers r3 
01EB           1031   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
01EB           1032   ;------------------------------------------------------------
01EB           1033   ;        D:\ELEC 291\Lab5\Lab5.c:228: int getsn (char * buff, int len)
01EB           1034   ;        -----------------------------------------
01EB           1035   ;         function getsn
01EB           1036   ;        -----------------------------------------
01EB           1037   _getsn:
01EB 858238    1038            mov     _getsn_buff_1_63,dpl
01EE 858339    1039            mov     (_getsn_buff_1_63 + 1),dph
01F1 85F03A    1040            mov     (_getsn_buff_1_63 + 2),b
01F4           1041   ;        D:\ELEC 291\Lab5\Lab5.c:233: for(j=0; j<(len-1); j++)
01F4 E4        1042            clr     a
01F5 F588      1043            mov     _getsn_sloc0_1_0,a
01F7 F589      1044            mov     (_getsn_sloc0_1_0 + 1),a
01F9 E590      1045            mov     a,_getsn_PARM_2
01FB 24FF      1046            add     a,#0xff
01FD FF        1047            mov     r7,a
01FE E591      1048            mov     a,(_getsn_PARM_2 + 1)
0200 34FF      1049            addc    a,#0xff
0202 F8        1050            mov     r0,a
0203 7900      1051            mov     r1,#0x00
0205 7A00      1052            mov     r2,#0x00
0207           1053   L012005?:
0207 C3        1054            clr     c
0208 E9        1055            mov     a,r1
0209 9F        1056            subb    a,r7
020A EA        1057            mov     a,r2
020B 6480      1058            xrl     a,#0x80
020D 88F0      1059            mov     b,r0
020F 63F080    1060            xrl     b,#0x80
0212 95F0      1061            subb    a,b
0214 5001      1062            jnc     L012008?
0216           1063   ;        D:\ELEC 291\Lab5\Lab5.c:235: c=getchar();
0216 C002      1064            push    ar2
0218 C007      1065            push    ar7
021A C000      1066            push    ar0
021C C001      1067            push    ar1
021E 120100    1068            lcall   _getchar
0221 AB82      1069            mov     r3,dpl
0223 D001      1070            pop     ar1
0225 D000      1071            pop     ar0
0227 D007      1072            pop     ar7
0229 D002      1073            pop     ar2
022B           1074   ;        D:\ELEC 291\Lab5\Lab5.c:236: if ( (c=='\n') || (c=='\r') )
022B BB0A68    1075            cjne    r3,#0x0A,L012015?
022E 8001      1076            sjmp    L012001?
0230           1077   L012015?:
0230 BB0DE8    1078            cjne    r3,#0x0D,L012002?
0233           1079   L012001?:
0233           1080   ;        D:\ELEC 291\Lab5\Lab5.c:238: buff[j]=0;
0233 E588      1081            mov     a,_getsn_sloc0_1_0
0235 2538      1082            add     a,_getsn_buff_1_63
0237 FC        1083            mov     r4,a
0238 E589      1084            mov     a,(_getsn_sloc0_1_0 + 1)
023A 3539      1085            addc    a,(_getsn_buff_1_63 + 1)
023C FD        1086            mov     r5,a
023D AE3A      1087            mov     r6,(_getsn_buff_1_63 + 2)
023F 8C82      1088            mov     dpl,r4
0241 8D83      1089            mov     dph,r5
0243 8EF0      1090            mov     b,r6
0245 E4        1091            clr     a
0246 120100    1092            lcall   __gptrput
0249           1093   ;        D:\ELEC 291\Lab5\Lab5.c:239: return j;
0249 858882    1094            mov     dpl,_getsn_sloc0_1_0
024C 858983    1095            mov     dph,(_getsn_sloc0_1_0 + 1)
024F 22        1096            ret
0250           1097   L012002?:
0250           1098   ;        D:\ELEC 291\Lab5\Lab5.c:243: buff[j]=c;
0250 E9        1099            mov     a,r1
0251 2538      1100            add     a,_getsn_buff_1_63
0253 FC        1101            mov     r4,a
0254 EA        1102            mov     a,r2
0255 3539      1103            addc    a,(_getsn_buff_1_63 + 1)
0257 FD        1104            mov     r5,a
0258 AE3A      1105            mov     r6,(_getsn_buff_1_63 + 2)
025A 8C82      1106            mov     dpl,r4
025C 8D83      1107            mov     dph,r5
025E 8EF0      1108            mov     b,r6
0260 EB        1109            mov     a,r3
0261 120100    1110            lcall   __gptrput
0264           1111   ;        D:\ELEC 291\Lab5\Lab5.c:233: for(j=0; j<(len-1); j++)
0264 09        1112            inc     r1
0265 B90068    1113            cjne    r1,#0x00,L012018?
0268 0A        1114            inc     r2
0269           1115   L012018?:
0269 8988      1116            mov     _getsn_sloc0_1_0,r1
026B 8A89      1117            mov     (_getsn_sloc0_1_0 + 1),r2
026D 8001      1118            sjmp    L012005?
026F           1119   L012008?:
026F           1120   ;        D:\ELEC 291\Lab5\Lab5.c:246: buff[j]=0;
026F E588      1121            mov     a,_getsn_sloc0_1_0
0271 2538      1122            add     a,_getsn_buff_1_63
0273 FA        1123            mov     r2,a
0274 E589      1124            mov     a,(_getsn_sloc0_1_0 + 1)
0276 3539      1125            addc    a,(_getsn_buff_1_63 + 1)
0278 FB        1126            mov     r3,a
0279 AC3A      1127            mov     r4,(_getsn_buff_1_63 + 2)
027B 8A82      1128            mov     dpl,r2
027D 8B83      1129            mov     dph,r3
027F 8CF0      1130            mov     b,r4
0281 E4        1131            clr     a
0282 120100    1132            lcall   __gptrput
0285           1133   ;        D:\ELEC 291\Lab5\Lab5.c:247: return len;
0285 859082    1134            mov     dpl,_getsn_PARM_2
0288 859183    1135            mov     dph,(_getsn_PARM_2 + 1)
028B 22        1136            ret
028C           1137   ;------------------------------------------------------------
028C           1138   ;Allocation info for local variables in function 'InitPinADC'
028C           1139   ;------------------------------------------------------------
028C           1140   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
028C           1141   ;portno                    Allocated to registers r2 
028C           1142   ;mask                      Allocated to registers r3 
028C           1143   ;------------------------------------------------------------
028C           1144   ;        D:\ELEC 291\Lab5\Lab5.c:253: void InitPinADC (unsigned char portno, unsigned char pin_num)
028C           1145   ;        -----------------------------------------
028C           1146   ;         function InitPinADC
028C           1147   ;        -----------------------------------------
028C           1148   _InitPinADC:
028C AA82      1149            mov     r2,dpl
028E           1150   ;        D:\ELEC 291\Lab5\Lab5.c:257: mask=1<<pin_num;
028E 8560F0    1151            mov     b,_InitPinADC_PARM_2
0291 05F0      1152            inc     b
0293 7401      1153            mov     a,#0x01
0295 8001      1154            sjmp    L013013?
0297           1155   L013011?:
0297 25E0      1156            add     a,acc
0299           1157   L013013?:
0299 D5F0E8    1158            djnz    b,L013011?
029C FB        1159            mov     r3,a
029D           1160   ;        D:\ELEC 291\Lab5\Lab5.c:259: SFRPAGE = 0x20;
029D 75A720    1161            mov     _SFRPAGE,#0x20
02A0           1162   ;        D:\ELEC 291\Lab5\Lab5.c:260: switch (portno)
02A0 BA0028    1163            cjne    r2,#0x00,L013014?
02A3 8001      1164            sjmp    L013001?
02A5           1165   L013014?:
02A5 BA01A8    1166            cjne    r2,#0x01,L013015?
02A8 8001      1167            sjmp    L013002?
02AA           1168   L013015?:
02AA           1169   ;        D:\ELEC 291\Lab5\Lab5.c:262: case 0:
02AA BA0228    1170            cjne    r2,#0x02,L013005?
02AD 8001      1171            sjmp    L013003?
02AF           1172   L013001?:
02AF           1173   ;        D:\ELEC 291\Lab5\Lab5.c:263: P0MDIN &= (~mask); // Set pin as analog input
02AF EB        1174            mov     a,r3
02B0 F4        1175            cpl     a
02B1 FA        1176            mov     r2,a
02B2 52F1      1177            anl     _P0MDIN,a
02B4           1178   ;        D:\ELEC 291\Lab5\Lab5.c:264: P0SKIP |= mask; // Skip Crossbar decoding for this pin
02B4 EB        1179            mov     a,r3
02B5 42D4      1180            orl     _P0SKIP,a
02B7           1181   ;        D:\ELEC 291\Lab5\Lab5.c:265: break;
02B7           1182   ;        D:\ELEC 291\Lab5\Lab5.c:266: case 1:
02B7 8001      1183            sjmp    L013005?
02B9           1184   L013002?:
02B9           1185   ;        D:\ELEC 291\Lab5\Lab5.c:267: P1MDIN &= (~mask); // Set pin as analog input
02B9 EB        1186            mov     a,r3
02BA F4        1187            cpl     a
02BB FA        1188            mov     r2,a
02BC 52F2      1189            anl     _P1MDIN,a
02BE           1190   ;        D:\ELEC 291\Lab5\Lab5.c:268: P1SKIP |= mask; // Skip Crossbar decoding for this pin
02BE EB        1191            mov     a,r3
02BF 42D5      1192            orl     _P1SKIP,a
02C1           1193   ;        D:\ELEC 291\Lab5\Lab5.c:269: break;
02C1           1194   ;        D:\ELEC 291\Lab5\Lab5.c:270: case 2:
02C1 8001      1195            sjmp    L013005?
02C3           1196   L013003?:
02C3           1197   ;        D:\ELEC 291\Lab5\Lab5.c:271: P2MDIN &= (~mask); // Set pin as analog input
02C3 EB        1198            mov     a,r3
02C4 F4        1199            cpl     a
02C5 FA        1200            mov     r2,a
02C6 52F3      1201            anl     _P2MDIN,a
02C8           1202   ;        D:\ELEC 291\Lab5\Lab5.c:272: P2SKIP |= mask; // Skip Crossbar decoding for this pin
02C8 EB        1203            mov     a,r3
02C9 42CC      1204            orl     _P2SKIP,a
02CB           1205   ;        D:\ELEC 291\Lab5\Lab5.c:276: }
02CB           1206   L013005?:
02CB           1207   ;        D:\ELEC 291\Lab5\Lab5.c:277: SFRPAGE = 0x00;
02CB 75A700    1208            mov     _SFRPAGE,#0x00
02CE 22        1209            ret
02CF           1210   ;------------------------------------------------------------
02CF           1211   ;Allocation info for local variables in function 'ADC_at_Pin'
02CF           1212   ;------------------------------------------------------------
02CF           1213   ;pin                       Allocated to registers 
02CF           1214   ;------------------------------------------------------------
02CF           1215   ;        D:\ELEC 291\Lab5\Lab5.c:280: unsigned int ADC_at_Pin(unsigned char pin)
02CF           1216   ;        -----------------------------------------
02CF           1217   ;         function ADC_at_Pin
02CF           1218   ;        -----------------------------------------
02CF           1219   _ADC_at_Pin:
02CF 8582BB    1220            mov     _ADC0MX,dpl
02D2           1221   ;        D:\ELEC 291\Lab5\Lab5.c:283: ADINT = 0;
02D2 C2ED      1222            clr     _ADINT
02D4           1223   ;        D:\ELEC 291\Lab5\Lab5.c:284: ADBUSY = 1;     // Convert voltage at the pin
02D4 D2EC      1224            setb    _ADBUSY
02D6           1225   ;        D:\ELEC 291\Lab5\Lab5.c:285: while (!ADINT); // Wait for conversion to complete
02D6           1226   L014001?:
02D6 30EDA8    1227            jnb     _ADINT,L014001?
02D9           1228   ;        D:\ELEC 291\Lab5\Lab5.c:286: return (ADC0);
02D9 85BD82    1229            mov     dpl,_ADC0
02DC 85BE83    1230            mov     dph,(_ADC0 >> 8)
02DF 22        1231            ret
02E0           1232   ;------------------------------------------------------------
02E0           1233   ;Allocation info for local variables in function 'Volts_at_Pin'
02E0           1234   ;------------------------------------------------------------
02E0           1235   ;pin                       Allocated to registers r2 
02E0           1236   ;------------------------------------------------------------
02E0           1237   ;        D:\ELEC 291\Lab5\Lab5.c:289: float Volts_at_Pin(unsigned char pin)
02E0           1238   ;        -----------------------------------------
02E0           1239   ;         function Volts_at_Pin
02E0           1240   ;        -----------------------------------------
02E0           1241   _Volts_at_Pin:
02E0           1242   ;        D:\ELEC 291\Lab5\Lab5.c:291: return ((ADC_at_Pin(pin)*VDD)/16383.0);
02E0 120100    1243            lcall   _ADC_at_Pin
02E3 120100    1244            lcall   ___uint2fs
02E6 AA82      1245            mov     r2,dpl
02E8 AB83      1246            mov     r3,dph
02EA ACF0      1247            mov     r4,b
02EC FD        1248            mov     r5,a
02ED C002      1249            push    ar2
02EF C003      1250            push    ar3
02F1 C004      1251            push    ar4
02F3 C005      1252            push    ar5
02F5 906C8B    1253            mov     dptr,#0x6C8B
02F8 75F053    1254            mov     b,#0x53
02FB 7440      1255            mov     a,#0x40
02FD 120100    1256            lcall   ___fsmul
0300 AA82      1257            mov     r2,dpl
0302 AB83      1258            mov     r3,dph
0304 ACF0      1259            mov     r4,b
0306 FD        1260            mov     r5,a
0307 E581      1261            mov     a,sp
0309 24FC      1262            add     a,#0xfc
030B F581      1263            mov     sp,a
030D E4        1264            clr     a
030E C0E0      1265            push    acc
0310 74FC      1266            mov     a,#0xFC
0312 C0E0      1267            push    acc
0314 747F      1268            mov     a,#0x7F
0316 C0E0      1269            push    acc
0318 7446      1270            mov     a,#0x46
031A C0E0      1271            push    acc
031C 8A82      1272            mov     dpl,r2
031E 8B83      1273            mov     dph,r3
0320 8CF0      1274            mov     b,r4
0322 ED        1275            mov     a,r5
0323 120100    1276            lcall   ___fsdiv
0326 AA82      1277            mov     r2,dpl
0328 AB83      1278            mov     r3,dph
032A ACF0      1279            mov     r4,b
032C FD        1280            mov     r5,a
032D E581      1281            mov     a,sp
032F 24FC      1282            add     a,#0xfc
0331 F581      1283            mov     sp,a
0333 8A82      1284            mov     dpl,r2
0335 8B83      1285            mov     dph,r3
0337 8CF0      1286            mov     b,r4
0339 ED        1287            mov     a,r5
033A 22        1288            ret
033B           1289   ;------------------------------------------------------------
033B           1290   ;Allocation info for local variables in function 'halfPoint'
033B           1291   ;------------------------------------------------------------
033B           1292   ;halfPeriod                Allocated to registers r2 r3 r4 r5 
033B           1293   ;myof                      Allocated to registers r2 r3 r4 r5 
033B           1294   ;------------------------------------------------------------
033B           1295   ;        D:\ELEC 291\Lab5\Lab5.c:294: float halfPoint(void) {
033B           1296   ;        -----------------------------------------
033B           1297   ;         function halfPoint
033B           1298   ;        -----------------------------------------
033B           1299   _halfPoint:
033B           1300   ;        D:\ELEC 291\Lab5\Lab5.c:297: TR0 = 0; // stop timer 0
033B C28C      1301            clr     _TR0
033D           1302   ;        D:\ELEC 291\Lab5\Lab5.c:298: TMOD&=0B_1111_0000; // set timer 0 as 16 bit timer
033D 5389F0    1303            anl     _TMOD,#0xF0
0340           1304   ;        D:\ELEC 291\Lab5\Lab5.c:299: TMOD|=0B_0000_0001; // set timer 0 as 16 bit timer
0340 438901    1305            orl     _TMOD,#0x01
0343           1306   ;        D:\ELEC 291\Lab5\Lab5.c:300: TH0 = 0; TL0=0; myof=0; // reset the timer and overflow counter
0343 758C00    1307            mov     _TH0,#0x00
0346 758A00    1308            mov     _TL0,#0x00
0349 7A00      1309            mov     r2,#0x00
034B 7B00      1310            mov     r3,#0x00
034D 7C00      1311            mov     r4,#0x00
034F 7D00      1312            mov     r5,#0x00
0351           1313   ;        D:\ELEC 291\Lab5\Lab5.c:301: TF0=0; // clear overflow
0351 C28D      1314            clr     _TF0
0353           1315   ;        D:\ELEC 291\Lab5\Lab5.c:302: while(P2_3==1); // wait for the signal to be 0
0353           1316   L016001?:
0353 20A3E8    1317            jb      _P2_3,L016001?
0356           1318   ;        D:\ELEC 291\Lab5\Lab5.c:303: while(P2_3==0); // wait for the signal to be 1
0356           1319   L016004?:
0356 30A328    1320            jnb     _P2_3,L016004?
0359           1321   ;        D:\ELEC 291\Lab5\Lab5.c:304: Timer3us(500);
0359 7582F4    1322            mov     dpl,#0xF4
035C C002      1323            push    ar2
035E C003      1324            push    ar3
0360 C004      1325            push    ar4
0362 C005      1326            push    ar5
0364 120100    1327            lcall   _Timer3us
0367 D005      1328            pop     ar5
0369 D004      1329            pop     ar4
036B D003      1330            pop     ar3
036D D002      1331            pop     ar2
036F           1332   ;        D:\ELEC 291\Lab5\Lab5.c:305: if(P2_3==1) {
036F 20A368    1333            jb      _P2_3,L016026?
0372 020100    1334            ljmp    L016013?
0375           1335   L016026?:
0375           1336   ;        D:\ELEC 291\Lab5\Lab5.c:306: TR0=1; // start the timer
0375 D28C      1337            setb    _TR0
0377           1338   ;        D:\ELEC 291\Lab5\Lab5.c:307: while (P2_3 == 1) { // while the signal is 1
0377           1339   L016009?:
0377 30A328    1340            jnb     _P2_3,L016011?
037A           1341   ;        D:\ELEC 291\Lab5\Lab5.c:308: if (TF0) {TF0=0; myof++;} // if overflow is 1 then reset the overflow and increment my of
037A 108D68    1342            jbc     _TF0,L016028?
037D 8001      1343            sjmp    L016009?
037F           1344   L016028?:
037F E4        1345            clr     a
0380 C0E0      1346            push    acc
0382 C0E0      1347            push    acc
0384 7480      1348            mov     a,#0x80
0386 C0E0      1349            push    acc
0388 743F      1350            mov     a,#0x3F
038A C0E0      1351            push    acc
038C 8A82      1352            mov     dpl,r2
038E 8B83      1353            mov     dph,r3
0390 8CF0      1354            mov     b,r4
0392 ED        1355            mov     a,r5
0393 120100    1356            lcall   ___fsadd
0396 AA82      1357            mov     r2,dpl
0398 AB83      1358            mov     r3,dph
039A ACF0      1359            mov     r4,b
039C FD        1360            mov     r5,a
039D E581      1361            mov     a,sp
039F 24FC      1362            add     a,#0xfc
03A1 F581      1363            mov     sp,a
03A3 8001      1364            sjmp    L016009?
03A5           1365   L016011?:
03A5           1366   ;        D:\ELEC 291\Lab5\Lab5.c:310: TR0 =0; // stop the counter
03A5 C28C      1367            clr     _TR0
03A7           1368   ;        D:\ELEC 291\Lab5\Lab5.c:311: halfPeriod = (myof*65536.0 + TH0*256.0 + TL0) / 6000000.0;// this is in units of 12/CLK so we have to divide by 6,000,000 so it is in seconds
03A7 C002      1369            push    ar2
03A9 C003      1370            push    ar3
03AB C004      1371            push    ar4
03AD C005      1372            push    ar5
03AF 900000    1373            mov     dptr,#0x0000
03B2 75F080    1374            mov     b,#0x80
03B5 7447      1375            mov     a,#0x47
03B7 120100    1376            lcall   ___fsmul
03BA AA82      1377            mov     r2,dpl
03BC AB83      1378            mov     r3,dph
03BE ACF0      1379            mov     r4,b
03C0 FD        1380            mov     r5,a
03C1 E581      1381            mov     a,sp
03C3 24FC      1382            add     a,#0xfc
03C5 F581      1383            mov     sp,a
03C7 858C82    1384            mov     dpl,_TH0
03CA C002      1385            push    ar2
03CC C003      1386            push    ar3
03CE C004      1387            push    ar4
03D0 C005      1388            push    ar5
03D2 120100    1389            lcall   ___uchar2fs
03D5 AE82      1390            mov     r6,dpl
03D7 AF83      1391            mov     r7,dph
03D9 A8F0      1392            mov     r0,b
03DB F9        1393            mov     r1,a
03DC C006      1394            push    ar6
03DE C007      1395            push    ar7
03E0 C000      1396            push    ar0
03E2 C001      1397            push    ar1
03E4 900000    1398            mov     dptr,#0x0000
03E7 75F080    1399            mov     b,#0x80
03EA 7443      1400            mov     a,#0x43
03EC 120100    1401            lcall   ___fsmul
03EF AE82      1402            mov     r6,dpl
03F1 AF83      1403            mov     r7,dph
03F3 A8F0      1404            mov     r0,b
03F5 F9        1405            mov     r1,a
03F6 E581      1406            mov     a,sp
03F8 24FC      1407            add     a,#0xfc
03FA F581      1408            mov     sp,a
03FC D005      1409            pop     ar5
03FE D004      1410            pop     ar4
0400 D003      1411            pop     ar3
0402 D002      1412            pop     ar2
0404 C006      1413            push    ar6
0406 C007      1414            push    ar7
0408 C000      1415            push    ar0
040A C001      1416            push    ar1
040C 8A82      1417            mov     dpl,r2
040E 8B83      1418            mov     dph,r3
0410 8CF0      1419            mov     b,r4
0412 ED        1420            mov     a,r5
0413 120100    1421            lcall   ___fsadd
0416 AA82      1422            mov     r2,dpl
0418 AB83      1423            mov     r3,dph
041A ACF0      1424            mov     r4,b
041C FD        1425            mov     r5,a
041D E581      1426            mov     a,sp
041F 24FC      1427            add     a,#0xfc
0421 F581      1428            mov     sp,a
0423 AE8A      1429            mov     r6,_TL0
0425 7F00      1430            mov     r7,#0x00
0427 8E82      1431            mov     dpl,r6
0429 8F83      1432            mov     dph,r7
042B C002      1433            push    ar2
042D C003      1434            push    ar3
042F C004      1435            push    ar4
0431 C005      1436            push    ar5
0433 120100    1437            lcall   ___sint2fs
0436 AE82      1438            mov     r6,dpl
0438 AF83      1439            mov     r7,dph
043A A8F0      1440            mov     r0,b
043C F9        1441            mov     r1,a
043D D005      1442            pop     ar5
043F D004      1443            pop     ar4
0441 D003      1444            pop     ar3
0443 D002      1445            pop     ar2
0445 C006      1446            push    ar6
0447 C007      1447            push    ar7
0449 C000      1448            push    ar0
044B C001      1449            push    ar1
044D 8A82      1450            mov     dpl,r2
044F 8B83      1451            mov     dph,r3
0451 8CF0      1452            mov     b,r4
0453 ED        1453            mov     a,r5
0454 120100    1454            lcall   ___fsadd
0457 AA82      1455            mov     r2,dpl
0459 AB83      1456            mov     r3,dph
045B ACF0      1457            mov     r4,b
045D FD        1458            mov     r5,a
045E E581      1459            mov     a,sp
0460 24FC      1460            add     a,#0xfc
0462 F581      1461            mov     sp,a
0464 E4        1462            clr     a
0465 C0E0      1463            push    acc
0467 741B      1464            mov     a,#0x1B
0469 C0E0      1465            push    acc
046B 74B7      1466            mov     a,#0xB7
046D C0E0      1467            push    acc
046F 744A      1468            mov     a,#0x4A
0471 C0E0      1469            push    acc
0473 8A82      1470            mov     dpl,r2
0475 8B83      1471            mov     dph,r3
0477 8CF0      1472            mov     b,r4
0479 ED        1473            mov     a,r5
047A 120100    1474            lcall   ___fsdiv
047D AA82      1475            mov     r2,dpl
047F AB83      1476            mov     r3,dph
0481 ACF0      1477            mov     r4,b
0483 FD        1478            mov     r5,a
0484 E581      1479            mov     a,sp
0486 24FC      1480            add     a,#0xfc
0488 F581      1481            mov     sp,a
048A           1482   ;        D:\ELEC 291\Lab5\Lab5.c:312: return halfPeriod;
048A 8A82      1483            mov     dpl,r2
048C 8B83      1484            mov     dph,r3
048E 8CF0      1485            mov     b,r4
0490 ED        1486            mov     a,r5
0491 22        1487            ret
0492           1488   L016013?:
0492           1489   ;        D:\ELEC 291\Lab5\Lab5.c:314: return halfPoint();
0492 020100    1490            ljmp    _halfPoint
0495           1491   ;------------------------------------------------------------
0495           1492   ;Allocation info for local variables in function 'timeDifference1'
0495           1493   ;------------------------------------------------------------
0495           1494   ;time                      Allocated to registers r2 r3 r4 r5 
0495           1495   ;myof                      Allocated to registers r2 r3 r4 r5 
0495           1496   ;------------------------------------------------------------
0495           1497   ;        D:\ELEC 291\Lab5\Lab5.c:318: float timeDifference1(void) {
0495           1498   ;        -----------------------------------------
0495           1499   ;         function timeDifference1
0495           1500   ;        -----------------------------------------
0495           1501   _timeDifference1:
0495           1502   ;        D:\ELEC 291\Lab5\Lab5.c:321: TR0 = 0; // stop timer 0
0495 C28C      1503            clr     _TR0
0497           1504   ;        D:\ELEC 291\Lab5\Lab5.c:322: TMOD&=0B_1111_0000; // set timer 0 as 16 bit timer
0497 5389F0    1505            anl     _TMOD,#0xF0
049A           1506   ;        D:\ELEC 291\Lab5\Lab5.c:323: TMOD|=0B_0000_0001; // set timer 0 as 16 bit timer
049A 438901    1507            orl     _TMOD,#0x01
049D           1508   ;        D:\ELEC 291\Lab5\Lab5.c:324: TH0 = 0; TL0=0; myof=0; // reset the timer and overflow counter
049D 758C00    1509            mov     _TH0,#0x00
04A0 758A00    1510            mov     _TL0,#0x00
04A3 7A00      1511            mov     r2,#0x00
04A5 7B00      1512            mov     r3,#0x00
04A7 7C00      1513            mov     r4,#0x00
04A9 7D00      1514            mov     r5,#0x00
04AB           1515   ;        D:\ELEC 291\Lab5\Lab5.c:325: TF0=0; // clear overflow
04AB C28D      1516            clr     _TF0
04AD           1517   ;        D:\ELEC 291\Lab5\Lab5.c:326: while(P2_3==1 || P2_2 == 1); // if either the first or second signal are 1 then keep looping until both are 0
04AD           1518   L017002?:
04AD 20A368    1519            jb      _P2_3,L017002?
04B0 20A268    1520            jb      _P2_2,L017002?
04B3           1521   ;        D:\ELEC 291\Lab5\Lab5.c:327: while(P2_2==0); // wait for the first sginal to be 1
04B3           1522   L017005?:
04B3 30A2A8    1523            jnb     _P2_2,L017005?
04B6           1524   ;        D:\ELEC 291\Lab5\Lab5.c:328: Timer3us(500);
04B6 7582F4    1525            mov     dpl,#0xF4
04B9 C002      1526            push    ar2
04BB C003      1527            push    ar3
04BD C004      1528            push    ar4
04BF C005      1529            push    ar5
04C1 120100    1530            lcall   _Timer3us
04C4 D005      1531            pop     ar5
04C6 D004      1532            pop     ar4
04C8 D003      1533            pop     ar3
04CA D002      1534            pop     ar2
04CC           1535   ;        D:\ELEC 291\Lab5\Lab5.c:329: if (P2_2 == 1) {
04CC 20A2E8    1536            jb      _P2_2,L017029?
04CF 020100    1537            ljmp    L017014?
04D2           1538   L017029?:
04D2           1539   ;        D:\ELEC 291\Lab5\Lab5.c:330: TR0 =1; // start the timer
04D2 D28C      1540            setb    _TR0
04D4           1541   ;        D:\ELEC 291\Lab5\Lab5.c:331: while (P2_3 == 1) { // while the signal is 1
04D4           1542   L017010?:
04D4 30A3A8    1543            jnb     _P2_3,L017012?
04D7           1544   ;        D:\ELEC 291\Lab5\Lab5.c:332: if (TF0) {TF0=0; myof++;} // if overflow is 1 then reset the overflow and increment my of
04D7 108DE8    1545            jbc     _TF0,L017031?
04DA 8001      1546            sjmp    L017010?
04DC           1547   L017031?:
04DC E4        1548            clr     a
04DD C0E0      1549            push    acc
04DF C0E0      1550            push    acc
04E1 7480      1551            mov     a,#0x80
04E3 C0E0      1552            push    acc
04E5 743F      1553            mov     a,#0x3F
04E7 C0E0      1554            push    acc
04E9 8A82      1555            mov     dpl,r2
04EB 8B83      1556            mov     dph,r3
04ED 8CF0      1557            mov     b,r4
04EF ED        1558            mov     a,r5
04F0 120100    1559            lcall   ___fsadd
04F3 AA82      1560            mov     r2,dpl
04F5 AB83      1561            mov     r3,dph
04F7 ACF0      1562            mov     r4,b
04F9 FD        1563            mov     r5,a
04FA E581      1564            mov     a,sp
04FC 24FC      1565            add     a,#0xfc
04FE F581      1566            mov     sp,a
0500 8001      1567            sjmp    L017010?
0502           1568   L017012?:
0502           1569   ;        D:\ELEC 291\Lab5\Lab5.c:334: TR0 = 0; // stop the counter
0502 C28C      1570            clr     _TR0
0504           1571   ;        D:\ELEC 291\Lab5\Lab5.c:335: time = (myof*65536.0 + TH0*256.0 + TL0) / 6000000.0; // divide by 6M to get it in seconds;
0504 C002      1572            push    ar2
0506 C003      1573            push    ar3
0508 C004      1574            push    ar4
050A C005      1575            push    ar5
050C 900000    1576            mov     dptr,#0x0000
050F 75F080    1577            mov     b,#0x80
0512 7447      1578            mov     a,#0x47
0514 120100    1579            lcall   ___fsmul
0517 AA82      1580            mov     r2,dpl
0519 AB83      1581            mov     r3,dph
051B ACF0      1582            mov     r4,b
051D FD        1583            mov     r5,a
051E E581      1584            mov     a,sp
0520 24FC      1585            add     a,#0xfc
0522 F581      1586            mov     sp,a
0524 858C82    1587            mov     dpl,_TH0
0527 C002      1588            push    ar2
0529 C003      1589            push    ar3
052B C004      1590            push    ar4
052D C005      1591            push    ar5
052F 120100    1592            lcall   ___uchar2fs
0532 AE82      1593            mov     r6,dpl
0534 AF83      1594            mov     r7,dph
0536 A8F0      1595            mov     r0,b
0538 F9        1596            mov     r1,a
0539 C006      1597            push    ar6
053B C007      1598            push    ar7
053D C000      1599            push    ar0
053F C001      1600            push    ar1
0541 900000    1601            mov     dptr,#0x0000
0544 75F080    1602            mov     b,#0x80
0547 7443      1603            mov     a,#0x43
0549 120100    1604            lcall   ___fsmul
054C AE82      1605            mov     r6,dpl
054E AF83      1606            mov     r7,dph
0550 A8F0      1607            mov     r0,b
0552 F9        1608            mov     r1,a
0553 E581      1609            mov     a,sp
0555 24FC      1610            add     a,#0xfc
0557 F581      1611            mov     sp,a
0559 D005      1612            pop     ar5
055B D004      1613            pop     ar4
055D D003      1614            pop     ar3
055F D002      1615            pop     ar2
0561 C006      1616            push    ar6
0563 C007      1617            push    ar7
0565 C000      1618            push    ar0
0567 C001      1619            push    ar1
0569 8A82      1620            mov     dpl,r2
056B 8B83      1621            mov     dph,r3
056D 8CF0      1622            mov     b,r4
056F ED        1623            mov     a,r5
0570 120100    1624            lcall   ___fsadd
0573 AA82      1625            mov     r2,dpl
0575 AB83      1626            mov     r3,dph
0577 ACF0      1627            mov     r4,b
0579 FD        1628            mov     r5,a
057A E581      1629            mov     a,sp
057C 24FC      1630            add     a,#0xfc
057E F581      1631            mov     sp,a
0580 AE8A      1632            mov     r6,_TL0
0582 7F00      1633            mov     r7,#0x00
0584 8E82      1634            mov     dpl,r6
0586 8F83      1635            mov     dph,r7
0588 C002      1636            push    ar2
058A C003      1637            push    ar3
058C C004      1638            push    ar4
058E C005      1639            push    ar5
0590 120100    1640            lcall   ___sint2fs
0593 AE82      1641            mov     r6,dpl
0595 AF83      1642            mov     r7,dph
0597 A8F0      1643            mov     r0,b
0599 F9        1644            mov     r1,a
059A D005      1645            pop     ar5
059C D004      1646            pop     ar4
059E D003      1647            pop     ar3
05A0 D002      1648            pop     ar2
05A2 C006      1649            push    ar6
05A4 C007      1650            push    ar7
05A6 C000      1651            push    ar0
05A8 C001      1652            push    ar1
05AA 8A82      1653            mov     dpl,r2
05AC 8B83      1654            mov     dph,r3
05AE 8CF0      1655            mov     b,r4
05B0 ED        1656            mov     a,r5
05B1 120100    1657            lcall   ___fsadd
05B4 AA82      1658            mov     r2,dpl
05B6 AB83      1659            mov     r3,dph
05B8 ACF0      1660            mov     r4,b
05BA FD        1661            mov     r5,a
05BB E581      1662            mov     a,sp
05BD 24FC      1663            add     a,#0xfc
05BF F581      1664            mov     sp,a
05C1 E4        1665            clr     a
05C2 C0E0      1666            push    acc
05C4 741B      1667            mov     a,#0x1B
05C6 C0E0      1668            push    acc
05C8 74B7      1669            mov     a,#0xB7
05CA C0E0      1670            push    acc
05CC 744A      1671            mov     a,#0x4A
05CE C0E0      1672            push    acc
05D0 8A82      1673            mov     dpl,r2
05D2 8B83      1674            mov     dph,r3
05D4 8CF0      1675            mov     b,r4
05D6 ED        1676            mov     a,r5
05D7 120100    1677            lcall   ___fsdiv
05DA AA82      1678            mov     r2,dpl
05DC AB83      1679            mov     r3,dph
05DE ACF0      1680            mov     r4,b
05E0 FD        1681            mov     r5,a
05E1 E581      1682            mov     a,sp
05E3 24FC      1683            add     a,#0xfc
05E5 F581      1684            mov     sp,a
05E7           1685   ;        D:\ELEC 291\Lab5\Lab5.c:336: return time;
05E7 8A82      1686            mov     dpl,r2
05E9 8B83      1687            mov     dph,r3
05EB 8CF0      1688            mov     b,r4
05ED ED        1689            mov     a,r5
05EE 22        1690            ret
05EF           1691   L017014?:
05EF           1692   ;        D:\ELEC 291\Lab5\Lab5.c:338: return timeDifference1(); // rerun until the period is set 
05EF 020100    1693            ljmp    _timeDifference1
05F2           1694   ;------------------------------------------------------------
05F2           1695   ;Allocation info for local variables in function 'timeDifference2'
05F2           1696   ;------------------------------------------------------------
05F2           1697   ;time                      Allocated to registers r2 r3 r4 r5 
05F2           1698   ;myof                      Allocated to registers r2 r3 r4 r5 
05F2           1699   ;------------------------------------------------------------
05F2           1700   ;        D:\ELEC 291\Lab5\Lab5.c:344: float timeDifference2(void) {
05F2           1701   ;        -----------------------------------------
05F2           1702   ;         function timeDifference2
05F2           1703   ;        -----------------------------------------
05F2           1704   _timeDifference2:
05F2           1705   ;        D:\ELEC 291\Lab5\Lab5.c:347: TR0 = 0; // stop timer 0
05F2 C28C      1706            clr     _TR0
05F4           1707   ;        D:\ELEC 291\Lab5\Lab5.c:348: TMOD&=0B_1111_0000; // set timer 0 as 16 bit timer
05F4 5389F0    1708            anl     _TMOD,#0xF0
05F7           1709   ;        D:\ELEC 291\Lab5\Lab5.c:349: TMOD|=0B_0000_0001; // set timer 0 as 16 bit timer
05F7 438901    1710            orl     _TMOD,#0x01
05FA           1711   ;        D:\ELEC 291\Lab5\Lab5.c:350: TH0 = 0; TL0=0; myof=0; // reset the timer and overflow counter
05FA 758C00    1712            mov     _TH0,#0x00
05FD 758A00    1713            mov     _TL0,#0x00
0600 7A00      1714            mov     r2,#0x00
0602 7B00      1715            mov     r3,#0x00
0604 7C00      1716            mov     r4,#0x00
0606 7D00      1717            mov     r5,#0x00
0608           1718   ;        D:\ELEC 291\Lab5\Lab5.c:351: TF0=0; // clear overflow
0608 C28D      1719            clr     _TF0
060A           1720   ;        D:\ELEC 291\Lab5\Lab5.c:352: while(P2_3==1 || P2_2 == 1); // if either the first or second signal are 1 then keep looping until both are 0
060A           1721   L018002?:
060A 20A328    1722            jb      _P2_3,L018002?
060D 20A228    1723            jb      _P2_2,L018002?
0610           1724   ;        D:\ELEC 291\Lab5\Lab5.c:353: while(P2_2==0); // wait for the first sginal to be 1
0610           1725   L018005?:
0610 30A268    1726            jnb     _P2_2,L018005?
0613           1727   ;        D:\ELEC 291\Lab5\Lab5.c:354: Timer3us(500);
0613 7582F4    1728            mov     dpl,#0xF4
0616 C002      1729            push    ar2
0618 C003      1730            push    ar3
061A C004      1731            push    ar4
061C C005      1732            push    ar5
061E 120100    1733            lcall   _Timer3us
0621 D005      1734            pop     ar5
0623 D004      1735            pop     ar4
0625 D003      1736            pop     ar3
0627 D002      1737            pop     ar2
0629           1738   ;        D:\ELEC 291\Lab5\Lab5.c:355: if (P2_2 == 1) {
0629 20A2A8    1739            jb      _P2_2,L018029?
062C 020100    1740            ljmp    L018014?
062F           1741   L018029?:
062F           1742   ;        D:\ELEC 291\Lab5\Lab5.c:356: TR0 =1; // start the timer
062F D28C      1743            setb    _TR0
0631           1744   ;        D:\ELEC 291\Lab5\Lab5.c:357: while (P2_3 == 0) { // while the signal is 1
0631           1745   L018010?:
0631 20A368    1746            jb      _P2_3,L018012?
0634           1747   ;        D:\ELEC 291\Lab5\Lab5.c:358: if (TF0) {TF0=0; myof++;} // if overflow is 1 then reset the overflow and increment my of
0634 108DA8    1748            jbc     _TF0,L018031?
0637 8001      1749            sjmp    L018010?
0639           1750   L018031?:
0639 E4        1751            clr     a
063A C0E0      1752            push    acc
063C C0E0      1753            push    acc
063E 7480      1754            mov     a,#0x80
0640 C0E0      1755            push    acc
0642 743F      1756            mov     a,#0x3F
0644 C0E0      1757            push    acc
0646 8A82      1758            mov     dpl,r2
0648 8B83      1759            mov     dph,r3
064A 8CF0      1760            mov     b,r4
064C ED        1761            mov     a,r5
064D 120100    1762            lcall   ___fsadd
0650 AA82      1763            mov     r2,dpl
0652 AB83      1764            mov     r3,dph
0654 ACF0      1765            mov     r4,b
0656 FD        1766            mov     r5,a
0657 E581      1767            mov     a,sp
0659 24FC      1768            add     a,#0xfc
065B F581      1769            mov     sp,a
065D 8001      1770            sjmp    L018010?
065F           1771   L018012?:
065F           1772   ;        D:\ELEC 291\Lab5\Lab5.c:360: TR0 = 0; // stop the counter
065F C28C      1773            clr     _TR0
0661           1774   ;        D:\ELEC 291\Lab5\Lab5.c:361: time = (myof*65536.0 + TH0*256.0 + TL0) / 6000000.0; // divide by 6M to get it in seconds;
0661 C002      1775            push    ar2
0663 C003      1776            push    ar3
0665 C004      1777            push    ar4
0667 C005      1778            push    ar5
0669 900000    1779            mov     dptr,#0x0000
066C 75F080    1780            mov     b,#0x80
066F 7447      1781            mov     a,#0x47
0671 120100    1782            lcall   ___fsmul
0674 AA82      1783            mov     r2,dpl
0676 AB83      1784            mov     r3,dph
0678 ACF0      1785            mov     r4,b
067A FD        1786            mov     r5,a
067B E581      1787            mov     a,sp
067D 24FC      1788            add     a,#0xfc
067F F581      1789            mov     sp,a
0681 858C82    1790            mov     dpl,_TH0
0684 C002      1791            push    ar2
0686 C003      1792            push    ar3
0688 C004      1793            push    ar4
068A C005      1794            push    ar5
068C 120100    1795            lcall   ___uchar2fs
068F AE82      1796            mov     r6,dpl
0691 AF83      1797            mov     r7,dph
0693 A8F0      1798            mov     r0,b
0695 F9        1799            mov     r1,a
0696 C006      1800            push    ar6
0698 C007      1801            push    ar7
069A C000      1802            push    ar0
069C C001      1803            push    ar1
069E 900000    1804            mov     dptr,#0x0000
06A1 75F080    1805            mov     b,#0x80
06A4 7443      1806            mov     a,#0x43
06A6 120100    1807            lcall   ___fsmul
06A9 AE82      1808            mov     r6,dpl
06AB AF83      1809            mov     r7,dph
06AD A8F0      1810            mov     r0,b
06AF F9        1811            mov     r1,a
06B0 E581      1812            mov     a,sp
06B2 24FC      1813            add     a,#0xfc
06B4 F581      1814            mov     sp,a
06B6 D005      1815            pop     ar5
06B8 D004      1816            pop     ar4
06BA D003      1817            pop     ar3
06BC D002      1818            pop     ar2
06BE C006      1819            push    ar6
06C0 C007      1820            push    ar7
06C2 C000      1821            push    ar0
06C4 C001      1822            push    ar1
06C6 8A82      1823            mov     dpl,r2
06C8 8B83      1824            mov     dph,r3
06CA 8CF0      1825            mov     b,r4
06CC ED        1826            mov     a,r5
06CD 120100    1827            lcall   ___fsadd
06D0 AA82      1828            mov     r2,dpl
06D2 AB83      1829            mov     r3,dph
06D4 ACF0      1830            mov     r4,b
06D6 FD        1831            mov     r5,a
06D7 E581      1832            mov     a,sp
06D9 24FC      1833            add     a,#0xfc
06DB F581      1834            mov     sp,a
06DD AE8A      1835            mov     r6,_TL0
06DF 7F00      1836            mov     r7,#0x00
06E1 8E82      1837            mov     dpl,r6
06E3 8F83      1838            mov     dph,r7
06E5 C002      1839            push    ar2
06E7 C003      1840            push    ar3
06E9 C004      1841            push    ar4
06EB C005      1842            push    ar5
06ED 120100    1843            lcall   ___sint2fs
06F0 AE82      1844            mov     r6,dpl
06F2 AF83      1845            mov     r7,dph
06F4 A8F0      1846            mov     r0,b
06F6 F9        1847            mov     r1,a
06F7 D005      1848            pop     ar5
06F9 D004      1849            pop     ar4
06FB D003      1850            pop     ar3
06FD D002      1851            pop     ar2
06FF C006      1852            push    ar6
0701 C007      1853            push    ar7
0703 C000      1854            push    ar0
0705 C001      1855            push    ar1
0707 8A82      1856            mov     dpl,r2
0709 8B83      1857            mov     dph,r3
070B 8CF0      1858            mov     b,r4
070D ED        1859            mov     a,r5
070E 120100    1860            lcall   ___fsadd
0711 AA82      1861            mov     r2,dpl
0713 AB83      1862            mov     r3,dph
0715 ACF0      1863            mov     r4,b
0717 FD        1864            mov     r5,a
0718 E581      1865            mov     a,sp
071A 24FC      1866            add     a,#0xfc
071C F581      1867            mov     sp,a
071E E4        1868            clr     a
071F C0E0      1869            push    acc
0721 741B      1870            mov     a,#0x1B
0723 C0E0      1871            push    acc
0725 74B7      1872            mov     a,#0xB7
0727 C0E0      1873            push    acc
0729 744A      1874            mov     a,#0x4A
072B C0E0      1875            push    acc
072D 8A82      1876            mov     dpl,r2
072F 8B83      1877            mov     dph,r3
0731 8CF0      1878            mov     b,r4
0733 ED        1879            mov     a,r5
0734 120100    1880            lcall   ___fsdiv
0737 AA82      1881            mov     r2,dpl
0739 AB83      1882            mov     r3,dph
073B ACF0      1883            mov     r4,b
073D FD        1884            mov     r5,a
073E E581      1885            mov     a,sp
0740 24FC      1886            add     a,#0xfc
0742 F581      1887            mov     sp,a
0744           1888   ;        D:\ELEC 291\Lab5\Lab5.c:362: return time;
0744 8A82      1889            mov     dpl,r2
0746 8B83      1890            mov     dph,r3
0748 8CF0      1891            mov     b,r4
074A ED        1892            mov     a,r5
074B 22        1893            ret
074C           1894   L018014?:
074C           1895   ;        D:\ELEC 291\Lab5\Lab5.c:364: return timeDifference2();
074C 020100    1896            ljmp    _timeDifference2
074F           1897   ;------------------------------------------------------------
074F           1898   ;Allocation info for local variables in function 'peak_to_RMS'
074F           1899   ;------------------------------------------------------------
074F           1900   ;peak                      Allocated to registers r2 r3 r4 r5 
074F           1901   ;------------------------------------------------------------
074F           1902   ;        D:\ELEC 291\Lab5\Lab5.c:369: float peak_to_RMS(float peak) {
074F           1903   ;        -----------------------------------------
074F           1904   ;         function peak_to_RMS
074F           1905   ;        -----------------------------------------
074F           1906   _peak_to_RMS:
074F AA82      1907            mov     r2,dpl
0751 AB83      1908            mov     r3,dph
0753 ACF0      1909            mov     r4,b
0755 FD        1910            mov     r5,a
0756           1911   ;        D:\ELEC 291\Lab5\Lab5.c:370: return (peak / 1.41421);
0756 74D5      1912            mov     a,#0xD5
0758 C0E0      1913            push    acc
075A 7404      1914            mov     a,#0x04
075C C0E0      1915            push    acc
075E 74B5      1916            mov     a,#0xB5
0760 C0E0      1917            push    acc
0762 743F      1918            mov     a,#0x3F
0764 C0E0      1919            push    acc
0766 8A82      1920            mov     dpl,r2
0768 8B83      1921            mov     dph,r3
076A 8CF0      1922            mov     b,r4
076C ED        1923            mov     a,r5
076D 120100    1924            lcall   ___fsdiv
0770 AA82      1925            mov     r2,dpl
0772 AB83      1926            mov     r3,dph
0774 ACF0      1927            mov     r4,b
0776 FD        1928            mov     r5,a
0777 E581      1929            mov     a,sp
0779 24FC      1930            add     a,#0xfc
077B F581      1931            mov     sp,a
077D 8A82      1932            mov     dpl,r2
077F 8B83      1933            mov     dph,r3
0781 8CF0      1934            mov     b,r4
0783 ED        1935            mov     a,r5
0784 22        1936            ret
0785           1937   ;------------------------------------------------------------
0785           1938   ;Allocation info for local variables in function 'peakVoltage1'
0785           1939   ;------------------------------------------------------------
0785           1940   ;halfPeriod                Allocated with name '_peakVoltage1_PARM_2'
0785           1941   ;voltage                   Allocated to registers r2 
0785           1942   ;peak                      Allocated to registers r3 r4 r5 r6 
0785           1943   ;quarterPeriodms           Allocated to registers r3 r4 r5 r6 
0785           1944   ;------------------------------------------------------------
0785           1945   ;        D:\ELEC 291\Lab5\Lab5.c:374: float peakVoltage1(unsigned char voltage, float halfPeriod) {
0785           1946   ;        -----------------------------------------
0785           1947   ;         function peakVoltage1
0785           1948   ;        -----------------------------------------
0785           1949   _peakVoltage1:
0785 AA82      1950            mov     r2,dpl
0787           1951   ;        D:\ELEC 291\Lab5\Lab5.c:376: float quarterPeriodms = (halfPeriod  * 500.0);  
0787 C002      1952            push    ar2
0789 C050      1953            push    _peakVoltage1_PARM_2
078B C051      1954            push    (_peakVoltage1_PARM_2 + 1)
078D C052      1955            push    (_peakVoltage1_PARM_2 + 2)
078F C053      1956            push    (_peakVoltage1_PARM_2 + 3)
0791 900000    1957            mov     dptr,#0x0000
0794 75F0FA    1958            mov     b,#0xFA
0797 7443      1959            mov     a,#0x43
0799 120100    1960            lcall   ___fsmul
079C AB82      1961            mov     r3,dpl
079E AC83      1962            mov     r4,dph
07A0 ADF0      1963            mov     r5,b
07A2 FE        1964            mov     r6,a
07A3 E581      1965            mov     a,sp
07A5 24FC      1966            add     a,#0xfc
07A7 F581      1967            mov     sp,a
07A9 D002      1968            pop     ar2
07AB           1969   ;        D:\ELEC 291\Lab5\Lab5.c:377: while(P2_3==1); // wait for the signal to be 0
07AB           1970   L020001?:
07AB 20A3E8    1971            jb      _P2_3,L020001?
07AE           1972   ;        D:\ELEC 291\Lab5\Lab5.c:378: while(P2_3==0); // wait for the signal to be 1
07AE           1973   L020004?:
07AE 30A328    1974            jnb     _P2_3,L020004?
07B1           1975   ;        D:\ELEC 291\Lab5\Lab5.c:379: Timer3us(500);
07B1 7582F4    1976            mov     dpl,#0xF4
07B4 C002      1977            push    ar2
07B6 C003      1978            push    ar3
07B8 C004      1979            push    ar4
07BA C005      1980            push    ar5
07BC C006      1981            push    ar6
07BE 120100    1982            lcall   _Timer3us
07C1 D006      1983            pop     ar6
07C3 D005      1984            pop     ar5
07C5 D004      1985            pop     ar4
07C7 D003      1986            pop     ar3
07C9 D002      1987            pop     ar2
07CB           1988   ;        D:\ELEC 291\Lab5\Lab5.c:380: if(P2_3 == 1) {
07CB 30A368    1989            jnb     _P2_3,L020008?
07CE           1990   ;        D:\ELEC 291\Lab5\Lab5.c:381: waitms(quarterPeriodms);
07CE 8B82      1991            mov     dpl,r3
07D0 8C83      1992            mov     dph,r4
07D2 8DF0      1993            mov     b,r5
07D4 EE        1994            mov     a,r6
07D5 C002      1995            push    ar2
07D7 120100    1996            lcall   ___fs2uint
07DA 120100    1997            lcall   _waitms
07DD D002      1998            pop     ar2
07DF           1999   ;        D:\ELEC 291\Lab5\Lab5.c:382: peak = Volts_at_Pin(voltage);
07DF 8A82      2000            mov     dpl,r2
07E1           2001   ;        D:\ELEC 291\Lab5\Lab5.c:383: return peak;
07E1 020100    2002            ljmp    _Volts_at_Pin
07E4           2003   L020008?:
07E4           2004   ;        D:\ELEC 291\Lab5\Lab5.c:385: return peakVoltage1(voltage, halfPeriod); // if we get a glitch then re run the program until peak is set
07E4 8A82      2005            mov     dpl,r2
07E6 020100    2006            ljmp    _peakVoltage1
07E9           2007   ;------------------------------------------------------------
07E9           2008   ;Allocation info for local variables in function 'peakVoltage2'
07E9           2009   ;------------------------------------------------------------
07E9           2010   ;halfPeriod                Allocated with name '_peakVoltage2_PARM_2'
07E9           2011   ;voltage                   Allocated to registers r2 
07E9           2012   ;peak                      Allocated to registers r3 r4 r5 r6 
07E9           2013   ;quarterPeriodms           Allocated to registers r3 r4 r5 r6 
07E9           2014   ;------------------------------------------------------------
07E9           2015   ;        D:\ELEC 291\Lab5\Lab5.c:390: float peakVoltage2(unsigned char voltage, float halfPeriod) {
07E9           2016   ;        -----------------------------------------
07E9           2017   ;         function peakVoltage2
07E9           2018   ;        -----------------------------------------
07E9           2019   _peakVoltage2:
07E9 AA82      2020            mov     r2,dpl
07EB           2021   ;        D:\ELEC 291\Lab5\Lab5.c:392: float quarterPeriodms = (halfPeriod  * 500.0);  
07EB C002      2022            push    ar2
07ED C000      2023            push    _peakVoltage2_PARM_2
07EF C001      2024            push    (_peakVoltage2_PARM_2 + 1)
07F1 C002      2025            push    (_peakVoltage2_PARM_2 + 2)
07F3 C003      2026            push    (_peakVoltage2_PARM_2 + 3)
07F5 900000    2027            mov     dptr,#0x0000
07F8 75F0FA    2028            mov     b,#0xFA
07FB 7443      2029            mov     a,#0x43
07FD 120100    2030            lcall   ___fsmul
0800 AB82      2031            mov     r3,dpl
0802 AC83      2032            mov     r4,dph
0804 ADF0      2033            mov     r5,b
0806 FE        2034            mov     r6,a
0807 E581      2035            mov     a,sp
0809 24FC      2036            add     a,#0xfc
080B F581      2037            mov     sp,a
080D D002      2038            pop     ar2
080F           2039   ;        D:\ELEC 291\Lab5\Lab5.c:393: while(P2_2==1); // wait for the signal to be 0
080F           2040   L021001?:
080F 20A2E8    2041            jb      _P2_2,L021001?
0812           2042   ;        D:\ELEC 291\Lab5\Lab5.c:394: while(P2_2==0); // wait for the signal to be 1
0812           2043   L021004?:
0812 30A228    2044            jnb     _P2_2,L021004?
0815           2045   ;        D:\ELEC 291\Lab5\Lab5.c:395: Timer3us(500);
0815 7582F4    2046            mov     dpl,#0xF4
0818 C002      2047            push    ar2
081A C003      2048            push    ar3
081C C004      2049            push    ar4
081E C005      2050            push    ar5
0820 C006      2051            push    ar6
0822 120100    2052            lcall   _Timer3us
0825 D006      2053            pop     ar6
0827 D005      2054            pop     ar5
0829 D004      2055            pop     ar4
082B D003      2056            pop     ar3
082D D002      2057            pop     ar2
082F           2058   ;        D:\ELEC 291\Lab5\Lab5.c:396: if(P2_2 == 1) {
082F 30A268    2059            jnb     _P2_2,L021008?
0832           2060   ;        D:\ELEC 291\Lab5\Lab5.c:397: waitms(quarterPeriodms);
0832 8B82      2061            mov     dpl,r3
0834 8C83      2062            mov     dph,r4
0836 8DF0      2063            mov     b,r5
0838 EE        2064            mov     a,r6
0839 C002      2065            push    ar2
083B 120100    2066            lcall   ___fs2uint
083E 120100    2067            lcall   _waitms
0841 D002      2068            pop     ar2
0843           2069   ;        D:\ELEC 291\Lab5\Lab5.c:398: peak = Volts_at_Pin(voltage);
0843 8A82      2070            mov     dpl,r2
0845           2071   ;        D:\ELEC 291\Lab5\Lab5.c:399: return peak;
0845 020100    2072            ljmp    _Volts_at_Pin
0848           2073   L021008?:
0848           2074   ;        D:\ELEC 291\Lab5\Lab5.c:401: return peakVoltage2(voltage, halfPeriod); // re run the function until peak is set
0848 8A82      2075            mov     dpl,r2
084A 020100    2076            ljmp    _peakVoltage2
084D           2077   ;------------------------------------------------------------
084D           2078   ;Allocation info for local variables in function 'time_to_phase'
084D           2079   ;------------------------------------------------------------
084D           2080   ;period                    Allocated with name '_time_to_phase_PARM_2'
084D           2081   ;timeDifference            Allocated to registers r2 r3 r4 r5 
084D           2082   ;------------------------------------------------------------
084D           2083   ;        D:\ELEC 291\Lab5\Lab5.c:406: float time_to_phase(float timeDifference, float period) {
084D           2084   ;        -----------------------------------------
084D           2085   ;         function time_to_phase
084D           2086   ;        -----------------------------------------
084D           2087   _time_to_phase:
084D AA82      2088            mov     r2,dpl
084F AB83      2089            mov     r3,dph
0851 ACF0      2090            mov     r4,b
0853 FD        2091            mov     r5,a
0854           2092   ;        D:\ELEC 291\Lab5\Lab5.c:407: return  ( 360.0 * timeDifference / period);
0854 C002      2093            push    ar2
0856 C003      2094            push    ar3
0858 C004      2095            push    ar4
085A C005      2096            push    ar5
085C 900000    2097            mov     dptr,#0x0000
085F 75F0B4    2098            mov     b,#0xB4
0862 7443      2099            mov     a,#0x43
0864 120100    2100            lcall   ___fsmul
0867 AA82      2101            mov     r2,dpl
0869 AB83      2102            mov     r3,dph
086B ACF0      2103            mov     r4,b
086D FD        2104            mov     r5,a
086E E581      2105            mov     a,sp
0870 24FC      2106            add     a,#0xfc
0872 F581      2107            mov     sp,a
0874 C0B0      2108            push    _time_to_phase_PARM_2
0876 C0B1      2109            push    (_time_to_phase_PARM_2 + 1)
0878 C0B2      2110            push    (_time_to_phase_PARM_2 + 2)
087A C0B3      2111            push    (_time_to_phase_PARM_2 + 3)
087C 8A82      2112            mov     dpl,r2
087E 8B83      2113            mov     dph,r3
0880 8CF0      2114            mov     b,r4
0882 ED        2115            mov     a,r5
0883 120100    2116            lcall   ___fsdiv
0886 AA82      2117            mov     r2,dpl
0888 AB83      2118            mov     r3,dph
088A ACF0      2119            mov     r4,b
088C FD        2120            mov     r5,a
088D E581      2121            mov     a,sp
088F 24FC      2122            add     a,#0xfc
0891 F581      2123            mov     sp,a
0893 8A82      2124            mov     dpl,r2
0895 8B83      2125            mov     dph,r3
0897 8CF0      2126            mov     b,r4
0899 ED        2127            mov     a,r5
089A 22        2128            ret
089B           2129   ;------------------------------------------------------------
089B           2130   ;Allocation info for local variables in function 'main'
089B           2131   ;------------------------------------------------------------
089B           2132   ;v                         Allocated with name '_main_v_1_106'
089B           2133   ;t                         Allocated with name '_main_t_1_106'
089B           2134   ;t1                        Allocated with name '_main_t1_1_106'
089B           2135   ;halfPeriod                Allocated with name '_main_halfPeriod_1_106'
089B           2136   ;phase                     Allocated to registers r6 r7 r2 r3 
089B           2137   ;phase1                    Allocated with name '_main_phase1_1_106'
089B           2138   ;phase2                    Allocated with name '_main_phase2_1_106'
089B           2139   ;rms                       Allocated with name '_main_rms_1_106'
089B           2140   ;frequency                 Allocated with name '_main_frequency_1_106'
089B           2141   ;dir                       Allocated to registers r6 r7 
089B           2142   ;sloc0                     Allocated with name '_main_sloc0_1_0'
089B           2143   ;sloc1                     Allocated with name '_main_sloc1_1_0'
089B           2144   ;buff                      Allocated with name '_main_buff_1_106'
089B           2145   ;angle                     Allocated with name '_main_angle_1_106'
089B           2146   ;------------------------------------------------------------
089B           2147   ;        D:\ELEC 291\Lab5\Lab5.c:410: void main (void)
089B           2148   ;        -----------------------------------------
089B           2149   ;         function main
089B           2150   ;        -----------------------------------------
089B           2151   _main:
089B           2152   ;        D:\ELEC 291\Lab5\Lab5.c:421: LCD_4BIT();
089B 120100    2153            lcall   _LCD_4BIT
089E           2154   ;        D:\ELEC 291\Lab5\Lab5.c:423: waitms(500); // Give PuTTy a chance to start before sending
089E 9001F4    2155            mov     dptr,#0x01F4
08A1 120100    2156            lcall   _waitms
08A4           2157   ;        D:\ELEC 291\Lab5\Lab5.c:424: printf("\x1b[2J\n"); // Clear screen using ANSI escape sequence.
08A4 74A8      2158            mov     a,#__str_0
08A6 C0E0      2159            push    acc
08A8 74CD      2160            mov     a,#(__str_0 >> 8)
08AA C0E0      2161            push    acc
08AC 7480      2162            mov     a,#0x80
08AE C0E0      2163            push    acc
08B0 120100    2164            lcall   _printf
08B3 1581      2165            dec     sp
08B5 1581      2166            dec     sp
08B7 1581      2167            dec     sp
08B9           2168   ;        D:\ELEC 291\Lab5\Lab5.c:429: __FILE__, __DATE__, __TIME__);
08B9           2169   ;        D:\ELEC 291\Lab5\Lab5.c:428: "Compiled: %s, %s\n\n",
08B9 7428      2170            mov     a,#__str_4
08BB C0E0      2171            push    acc
08BD 74CE      2172            mov     a,#(__str_4 >> 8)
08BF C0E0      2173            push    acc
08C1 7480      2174            mov     a,#0x80
08C3 C0E0      2175            push    acc
08C5 7468      2176            mov     a,#__str_3
08C7 C0E0      2177            push    acc
08C9 74CE      2178            mov     a,#(__str_3 >> 8)
08CB C0E0      2179            push    acc
08CD 7480      2180            mov     a,#0x80
08CF C0E0      2181            push    acc
08D1 74A8      2182            mov     a,#__str_2
08D3 C0E0      2183            push    acc
08D5 74CE      2184            mov     a,#(__str_2 >> 8)
08D7 C0E0      2185            push    acc
08D9 7480      2186            mov     a,#0x80
08DB C0E0      2187            push    acc
08DD 74E8      2188            mov     a,#__str_1
08DF C0E0      2189            push    acc
08E1 74CE      2190            mov     a,#(__str_1 >> 8)
08E3 C0E0      2191            push    acc
08E5 7480      2192            mov     a,#0x80
08E7 C0E0      2193            push    acc
08E9 120100    2194            lcall   _printf
08EC E581      2195            mov     a,sp
08EE 24F4      2196            add     a,#0xf4
08F0 F581      2197            mov     sp,a
08F2           2198   ;        D:\ELEC 291\Lab5\Lab5.c:433: InitPinADC(2, 4); // Configure P2.4 as analog input  this will be the test signal
08F2 756004    2199            mov     _InitPinADC_PARM_2,#0x04
08F5 758202    2200            mov     dpl,#0x02
08F8 120100    2201            lcall   _InitPinADC
08FB           2202   ;        D:\ELEC 291\Lab5\Lab5.c:434: InitPinADC(2, 5); // Configure P2.5 as analog input  this will be the reference signal
08FB 756005    2203            mov     _InitPinADC_PARM_2,#0x05
08FE 758202    2204            mov     dpl,#0x02
0901 120100    2205            lcall   _InitPinADC
0904           2206   ;        D:\ELEC 291\Lab5\Lab5.c:435: InitADC();
0904 120100    2207            lcall   _InitADC
0907           2208   ;        D:\ELEC 291\Lab5\Lab5.c:440: while(1) {
0907           2209   L023007?:
0907           2210   ;        D:\ELEC 291\Lab5\Lab5.c:441: v[2] = Volts_at_Pin(QFP32_MUX_P2_4);
0907 758211    2211            mov     dpl,#0x11
090A 120100    2212            lcall   _Volts_at_Pin
090D AA82      2213            mov     r2,dpl
090F AB83      2214            mov     r3,dph
0911 ACF0      2215            mov     r4,b
0913 FD        2216            mov     r5,a
0914 8AD0      2217            mov     (_main_v_1_106 + 0x0008),r2
0916 8BD1      2218            mov     ((_main_v_1_106 + 0x0008) + 1),r3
0918 8CD2      2219            mov     ((_main_v_1_106 + 0x0008) + 2),r4
091A 8DD3      2220            mov     ((_main_v_1_106 + 0x0008) + 3),r5
091C           2221   ;        D:\ELEC 291\Lab5\Lab5.c:442: v[3] = Volts_at_Pin(QFP32_MUX_P2_5);
091C 758212    2222            mov     dpl,#0x12
091F 120100    2223            lcall   _Volts_at_Pin
0922 AA82      2224            mov     r2,dpl
0924 AB83      2225            mov     r3,dph
0926 ACF0      2226            mov     r4,b
0928 FD        2227            mov     r5,a
0929 8AD4      2228            mov     (_main_v_1_106 + 0x000c),r2
092B 8BD5      2229            mov     ((_main_v_1_106 + 0x000c) + 1),r3
092D 8CD6      2230            mov     ((_main_v_1_106 + 0x000c) + 2),r4
092F 8DD7      2231            mov     ((_main_v_1_106 + 0x000c) + 3),r5
0931           2232   ;        D:\ELEC 291\Lab5\Lab5.c:444: halfPeriod = halfPoint(); // at P2.3
0931 120100    2233            lcall   _halfPoint
0934 858298    2234            mov     _main_halfPeriod_1_106,dpl
0937 858399    2235            mov     (_main_halfPeriod_1_106 + 1),dph
093A 85F09A    2236            mov     (_main_halfPeriod_1_106 + 2),b
093D F59B      2237            mov     (_main_halfPeriod_1_106 + 3),a
093F           2238   ;        D:\ELEC 291\Lab5\Lab5.c:445: v[0] = peakVoltage1(QFP32_MUX_P2_5, halfPeriod);
093F 859850    2239            mov     _peakVoltage1_PARM_2,_main_halfPeriod_1_106
0942 859951    2240            mov     (_peakVoltage1_PARM_2 + 1),(_main_halfPeriod_1_106 + 1)
0945 859A52    2241            mov     (_peakVoltage1_PARM_2 + 2),(_main_halfPeriod_1_106 + 2)
0948 859B53    2242            mov     (_peakVoltage1_PARM_2 + 3),(_main_halfPeriod_1_106 + 3)
094B 758212    2243            mov     dpl,#0x12
094E 120100    2244            lcall   _peakVoltage1
0951 AE82      2245            mov     r6,dpl
0953 AF83      2246            mov     r7,dph
0955 AAF0      2247            mov     r2,b
0957 FB        2248            mov     r3,a
0958 8EC8      2249            mov     _main_v_1_106,r6
095A 8FC9      2250            mov     (_main_v_1_106 + 1),r7
095C 8ACA      2251            mov     (_main_v_1_106 + 2),r2
095E 8BCB      2252            mov     (_main_v_1_106 + 3),r3
0960           2253   ;        D:\ELEC 291\Lab5\Lab5.c:446: v[1] = peakVoltage2(QFP32_MUX_P2_4, halfPeriod);
0960 859800    2254            mov     _peakVoltage2_PARM_2,_main_halfPeriod_1_106
0963 859901    2255            mov     (_peakVoltage2_PARM_2 + 1),(_main_halfPeriod_1_106 + 1)
0966 859A02    2256            mov     (_peakVoltage2_PARM_2 + 2),(_main_halfPeriod_1_106 + 2)
0969 859B03    2257            mov     (_peakVoltage2_PARM_2 + 3),(_main_halfPeriod_1_106 + 3)
096C 758211    2258            mov     dpl,#0x11
096F 120100    2259            lcall   _peakVoltage2
0972 AA82      2260            mov     r2,dpl
0974 AB83      2261            mov     r3,dph
0976 ACF0      2262            mov     r4,b
0978 FD        2263            mov     r5,a
0979 8ACC      2264            mov     (_main_v_1_106 + 0x0004),r2
097B 8BCD      2265            mov     ((_main_v_1_106 + 0x0004) + 1),r3
097D 8CCE      2266            mov     ((_main_v_1_106 + 0x0004) + 2),r4
097F 8DCF      2267            mov     ((_main_v_1_106 + 0x0004) + 3),r5
0981           2268   ;        D:\ELEC 291\Lab5\Lab5.c:447: t = timeDifference1();
0981 120100    2269            lcall   _timeDifference1
0984 858208    2270            mov     _main_t_1_106,dpl
0987 858309    2271            mov     (_main_t_1_106 + 1),dph
098A 85F00A    2272            mov     (_main_t_1_106 + 2),b
098D F50B      2273            mov     (_main_t_1_106 + 3),a
098F           2274   ;        D:\ELEC 291\Lab5\Lab5.c:448: t1 = timeDifference2();
098F 120100    2275            lcall   _timeDifference2
0992 858248    2276            mov     _main_t1_1_106,dpl
0995 858349    2277            mov     (_main_t1_1_106 + 1),dph
0998 85F04A    2278            mov     (_main_t1_1_106 + 2),b
099B F54B      2279            mov     (_main_t1_1_106 + 3),a
099D           2280   ;        D:\ELEC 291\Lab5\Lab5.c:449: phase1 = (180.0 - (time_to_phase(t, halfPeriod*2.0) + 360.0*0.0001/(2.0*halfPeriod)) ); // there are some offsets to countereact the time delays in the function
099D C098      2281            push    _main_halfPeriod_1_106
099F C099      2282            push    (_main_halfPeriod_1_106 + 1)
09A1 C09A      2283            push    (_main_halfPeriod_1_106 + 2)
09A3 C09B      2284            push    (_main_halfPeriod_1_106 + 3)
09A5 900000    2285            mov     dptr,#(0x00&0x00ff)
09A8 E4        2286            clr     a
09A9 F5F0      2287            mov     b,a
09AB 7440      2288            mov     a,#0x40
09AD 120100    2289            lcall   ___fsmul
09B0 858208    2290            mov     _main_sloc0_1_0,dpl
09B3 858309    2291            mov     (_main_sloc0_1_0 + 1),dph
09B6 85F00A    2292            mov     (_main_sloc0_1_0 + 2),b
09B9 F50B      2293            mov     (_main_sloc0_1_0 + 3),a
09BB E581      2294            mov     a,sp
09BD 24FC      2295            add     a,#0xfc
09BF F581      2296            mov     sp,a
09C1 8508B0    2297            mov     _time_to_phase_PARM_2,_main_sloc0_1_0
09C4 8509B1    2298            mov     (_time_to_phase_PARM_2 + 1),(_main_sloc0_1_0 + 1)
09C7 850AB2    2299            mov     (_time_to_phase_PARM_2 + 2),(_main_sloc0_1_0 + 2)
09CA 850BB3    2300            mov     (_time_to_phase_PARM_2 + 3),(_main_sloc0_1_0 + 3)
09CD 850882    2301            mov     dpl,_main_t_1_106
09D0 850983    2302            mov     dph,(_main_t_1_106 + 1)
09D3 850AF0    2303            mov     b,(_main_t_1_106 + 2)
09D6 E50B      2304            mov     a,(_main_t_1_106 + 3)
09D8 120100    2305            lcall   _time_to_phase
09DB 858248    2306            mov     _main_sloc1_1_0,dpl
09DE 858349    2307            mov     (_main_sloc1_1_0 + 1),dph
09E1 85F04A    2308            mov     (_main_sloc1_1_0 + 2),b
09E4 F54B      2309            mov     (_main_sloc1_1_0 + 3),a
09E6 C008      2310            push    _main_sloc0_1_0
09E8 C009      2311            push    (_main_sloc0_1_0 + 1)
09EA C00A      2312            push    (_main_sloc0_1_0 + 2)
09EC C00B      2313            push    (_main_sloc0_1_0 + 3)
09EE 9074BC    2314            mov     dptr,#0x74BC
09F1 75F013    2315            mov     b,#0x13
09F4 743D      2316            mov     a,#0x3D
09F6 120100    2317            lcall   ___fsdiv
09F9 AC82      2318            mov     r4,dpl
09FB AD83      2319            mov     r5,dph
09FD AAF0      2320            mov     r2,b
09FF FB        2321            mov     r3,a
0A00 E581      2322            mov     a,sp
0A02 24FC      2323            add     a,#0xfc
0A04 F581      2324            mov     sp,a
0A06 C004      2325            push    ar4
0A08 C005      2326            push    ar5
0A0A C002      2327            push    ar2
0A0C C003      2328            push    ar3
0A0E 854882    2329            mov     dpl,_main_sloc1_1_0
0A11 854983    2330            mov     dph,(_main_sloc1_1_0 + 1)
0A14 854AF0    2331            mov     b,(_main_sloc1_1_0 + 2)
0A17 E54B      2332            mov     a,(_main_sloc1_1_0 + 3)
0A19 120100    2333            lcall   ___fsadd
0A1C AA82      2334            mov     r2,dpl
0A1E AB83      2335            mov     r3,dph
0A20 ACF0      2336            mov     r4,b
0A22 FD        2337            mov     r5,a
0A23 E581      2338            mov     a,sp
0A25 24FC      2339            add     a,#0xfc
0A27 F581      2340            mov     sp,a
0A29 C002      2341            push    ar2
0A2B C003      2342            push    ar3
0A2D C004      2343            push    ar4
0A2F C005      2344            push    ar5
0A31 900000    2345            mov     dptr,#0x0000
0A34 75F034    2346            mov     b,#0x34
0A37 7443      2347            mov     a,#0x43
0A39 120100    2348            lcall   ___fssub
0A3C 8582E8    2349            mov     _main_phase1_1_106,dpl
0A3F 8583E9    2350            mov     (_main_phase1_1_106 + 1),dph
0A42 85F0EA    2351            mov     (_main_phase1_1_106 + 2),b
0A45 F5EB      2352            mov     (_main_phase1_1_106 + 3),a
0A47 E581      2353            mov     a,sp
0A49 24FC      2354            add     a,#0xfc
0A4B F581      2355            mov     sp,a
0A4D           2356   ;        D:\ELEC 291\Lab5\Lab5.c:450: phase2 = -1 * (time_to_phase(t1, halfPeriod*2.0) + 360.0*0.000278/(2.0*halfPeriod)) ; 
0A4D 8508B0    2357            mov     _time_to_phase_PARM_2,_main_sloc0_1_0
0A50 8509B1    2358            mov     (_time_to_phase_PARM_2 + 1),(_main_sloc0_1_0 + 1)
0A53 850AB2    2359            mov     (_time_to_phase_PARM_2 + 2),(_main_sloc0_1_0 + 2)
0A56 850BB3    2360            mov     (_time_to_phase_PARM_2 + 3),(_main_sloc0_1_0 + 3)
0A59 854882    2361            mov     dpl,_main_t1_1_106
0A5C 854983    2362            mov     dph,(_main_t1_1_106 + 1)
0A5F 854AF0    2363            mov     b,(_main_t1_1_106 + 2)
0A62 E54B      2364            mov     a,(_main_t1_1_106 + 3)
0A64 120100    2365            lcall   _time_to_phase
0A67 858248    2366            mov     _main_sloc1_1_0,dpl
0A6A 858349    2367            mov     (_main_sloc1_1_0 + 1),dph
0A6D 85F04A    2368            mov     (_main_sloc1_1_0 + 2),b
0A70 F54B      2369            mov     (_main_sloc1_1_0 + 3),a
0A72 C008      2370            push    _main_sloc0_1_0
0A74 C009      2371            push    (_main_sloc0_1_0 + 1)
0A76 C00A      2372            push    (_main_sloc0_1_0 + 2)
0A78 C00B      2373            push    (_main_sloc0_1_0 + 3)
0A7A 90F6BE    2374            mov     dptr,#0xF6BE
0A7D 75F0CC    2375            mov     b,#0xCC
0A80 743D      2376            mov     a,#0x3D
0A82 120100    2377            lcall   ___fsdiv
0A85 AC82      2378            mov     r4,dpl
0A87 AD83      2379            mov     r5,dph
0A89 AAF0      2380            mov     r2,b
0A8B FB        2381            mov     r3,a
0A8C E581      2382            mov     a,sp
0A8E 24FC      2383            add     a,#0xfc
0A90 F581      2384            mov     sp,a
0A92 C004      2385            push    ar4
0A94 C005      2386            push    ar5
0A96 C002      2387            push    ar2
0A98 C003      2388            push    ar3
0A9A 854882    2389            mov     dpl,_main_sloc1_1_0
0A9D 854983    2390            mov     dph,(_main_sloc1_1_0 + 1)
0AA0 854AF0    2391            mov     b,(_main_sloc1_1_0 + 2)
0AA3 E54B      2392            mov     a,(_main_sloc1_1_0 + 3)
0AA5 120100    2393            lcall   ___fsadd
0AA8 AA82      2394            mov     r2,dpl
0AAA AB83      2395            mov     r3,dph
0AAC ACF0      2396            mov     r4,b
0AAE FD        2397            mov     r5,a
0AAF E581      2398            mov     a,sp
0AB1 24FC      2399            add     a,#0xfc
0AB3 F581      2400            mov     sp,a
0AB5 8A38      2401            mov     _main_phase2_1_106,r2
0AB7 8B39      2402            mov     (_main_phase2_1_106 + 1),r3
0AB9 8C3A      2403            mov     (_main_phase2_1_106 + 2),r4
0ABB ED        2404            mov     a,r5
0ABC B2E7      2405            cpl     acc.7
0ABE F53B      2406            mov     (_main_phase2_1_106 + 3),a
0AC0           2407   ;        D:\ELEC 291\Lab5\Lab5.c:451: rms[0] = peak_to_RMS(v[0]);
0AC0 85C882    2408            mov     dpl,_main_v_1_106
0AC3 85C983    2409            mov     dph,(_main_v_1_106 + 1)
0AC6 85CAF0    2410            mov     b,(_main_v_1_106 + 2)
0AC9 E5CB      2411            mov     a,(_main_v_1_106 + 3)
0ACB 120100    2412            lcall   _peak_to_RMS
0ACE AE82      2413            mov     r6,dpl
0AD0 AF83      2414            mov     r7,dph
0AD2 AAF0      2415            mov     r2,b
0AD4 FB        2416            mov     r3,a
0AD5 8E78      2417            mov     _main_rms_1_106,r6
0AD7 8F79      2418            mov     (_main_rms_1_106 + 1),r7
0AD9 8A7A      2419            mov     (_main_rms_1_106 + 2),r2
0ADB 8B7B      2420            mov     (_main_rms_1_106 + 3),r3
0ADD           2421   ;        D:\ELEC 291\Lab5\Lab5.c:452: rms[1] = peak_to_RMS(v[1]);
0ADD 85CC82    2422            mov     dpl,(_main_v_1_106 + 0x0004)
0AE0 85CD83    2423            mov     dph,((_main_v_1_106 + 0x0004) + 1)
0AE3 85CEF0    2424            mov     b,((_main_v_1_106 + 0x0004) + 2)
0AE6 E5CF      2425            mov     a,((_main_v_1_106 + 0x0004) + 3)
0AE8 120100    2426            lcall   _peak_to_RMS
0AEB AA82      2427            mov     r2,dpl
0AED AB83      2428            mov     r3,dph
0AEF ACF0      2429            mov     r4,b
0AF1 FD        2430            mov     r5,a
0AF2 8A7C      2431            mov     (_main_rms_1_106 + 0x0004),r2
0AF4 8B7D      2432            mov     ((_main_rms_1_106 + 0x0004) + 1),r3
0AF6 8C7E      2433            mov     ((_main_rms_1_106 + 0x0004) + 2),r4
0AF8 8D7F      2434            mov     ((_main_rms_1_106 + 0x0004) + 3),r5
0AFA           2435   ;        D:\ELEC 291\Lab5\Lab5.c:453: frequency = 1.0 / (2.0*halfPeriod);
0AFA C008      2436            push    _main_sloc0_1_0
0AFC C009      2437            push    (_main_sloc0_1_0 + 1)
0AFE C00A      2438            push    (_main_sloc0_1_0 + 2)
0B00 C00B      2439            push    (_main_sloc0_1_0 + 3)
0B02 900000    2440            mov     dptr,#0x0000
0B05 75F080    2441            mov     b,#0x80
0B08 743F      2442            mov     a,#0x3F
0B0A 120100    2443            lcall   ___fsdiv
0B0D 8582C8    2444            mov     _main_frequency_1_106,dpl
0B10 8583C9    2445            mov     (_main_frequency_1_106 + 1),dph
0B13 85F0CA    2446            mov     (_main_frequency_1_106 + 2),b
0B16 F5CB      2447            mov     (_main_frequency_1_106 + 3),a
0B18 E581      2448            mov     a,sp
0B1A 24FC      2449            add     a,#0xfc
0B1C F581      2450            mov     sp,a
0B1E           2451   ;        D:\ELEC 291\Lab5\Lab5.c:454: dir = (int) phase1;
0B1E 85E882    2452            mov     dpl,_main_phase1_1_106
0B21 85E983    2453            mov     dph,(_main_phase1_1_106 + 1)
0B24 85EAF0    2454            mov     b,(_main_phase1_1_106 + 2)
0B27 E5EB      2455            mov     a,(_main_phase1_1_106 + 3)
0B29 120100    2456            lcall   ___fs2sint
0B2C AE82      2457            mov     r6,dpl
0B2E AF83      2458            mov     r7,dph
0B30           2459   ;        D:\ELEC 291\Lab5\Lab5.c:455: if(dir == 177 || dir == 178 || dir == 179)
0B30 BEB1E8    2460            cjne    r6,#0xB1,L023014?
0B33 BF00E8    2461            cjne    r7,#0x00,L023014?
0B36 8001      2462            sjmp    L023001?
0B38           2463   L023014?:
0B38 BEB268    2464            cjne    r6,#0xB2,L023015?
0B3B BF0068    2465            cjne    r7,#0x00,L023015?
0B3E 8001      2466            sjmp    L023001?
0B40           2467   L023015?:
0B40 BEB3A8    2468            cjne    r6,#0xB3,L023002?
0B43 BF00A8    2469            cjne    r7,#0x00,L023002?
0B46           2470   L023001?:
0B46           2471   ;        D:\ELEC 291\Lab5\Lab5.c:456: phase = phase2;
0B46 AE38      2472            mov     r6,_main_phase2_1_106
0B48 AF39      2473            mov     r7,(_main_phase2_1_106 + 1)
0B4A AA3A      2474            mov     r2,(_main_phase2_1_106 + 2)
0B4C AB3B      2475            mov     r3,(_main_phase2_1_106 + 3)
0B4E 8001      2476            sjmp    L023003?
0B50           2477   L023002?:
0B50           2478   ;        D:\ELEC 291\Lab5\Lab5.c:458: phase = phase1;
0B50 AEE8      2479            mov     r6,_main_phase1_1_106
0B52 AFE9      2480            mov     r7,(_main_phase1_1_106 + 1)
0B54 AAEA      2481            mov     r2,(_main_phase1_1_106 + 2)
0B56 ABEB      2482            mov     r3,(_main_phase1_1_106 + 3)
0B58           2483   L023003?:
0B58           2484   ;        D:\ELEC 291\Lab5\Lab5.c:460: printf ("RMS1 =%1.2fV, RMS2 =%1.2fV, Phase =%1.1f, frequency =%3.2f\r \n", rms[0], rms[1], phase, frequency);
0B58 C002      2485            push    ar2
0B5A C003      2486            push    ar3
0B5C C006      2487            push    ar6
0B5E C007      2488            push    ar7
0B60 C0C8      2489            push    _main_frequency_1_106
0B62 C0C9      2490            push    (_main_frequency_1_106 + 1)
0B64 C0CA      2491            push    (_main_frequency_1_106 + 2)
0B66 C0CB      2492            push    (_main_frequency_1_106 + 3)
0B68 C006      2493            push    ar6
0B6A C007      2494            push    ar7
0B6C C002      2495            push    ar2
0B6E C003      2496            push    ar3
0B70 C07C      2497            push    (_main_rms_1_106 + 0x0004)
0B72 C07D      2498            push    ((_main_rms_1_106 + 0x0004) + 1)
0B74 C07E      2499            push    ((_main_rms_1_106 + 0x0004) + 2)
0B76 C07F      2500            push    ((_main_rms_1_106 + 0x0004) + 3)
0B78 C078      2501            push    _main_rms_1_106
0B7A C079      2502            push    (_main_rms_1_106 + 1)
0B7C C07A      2503            push    (_main_rms_1_106 + 2)
0B7E C07B      2504            push    (_main_rms_1_106 + 3)
0B80 7428      2505            mov     a,#__str_5
0B82 C0E0      2506            push    acc
0B84 74D1      2507            mov     a,#(__str_5 >> 8)
0B86 C0E0      2508            push    acc
0B88 7480      2509            mov     a,#0x80
0B8A C0E0      2510            push    acc
0B8C 120100    2511            lcall   _printf
0B8F E581      2512            mov     a,sp
0B91 24ED      2513            add     a,#0xed
0B93 F581      2514            mov     sp,a
0B95           2515   ;        D:\ELEC 291\Lab5\Lab5.c:461: printf(" Half the period is %2.6f, Peak Voltage 1 =%2.6f, Peak Voltage 2 =%2.6f  ", halfPeriod, v[0], v[1]);
0B95 C0CC      2516            push    (_main_v_1_106 + 0x0004)
0B97 C0CD      2517            push    ((_main_v_1_106 + 0x0004) + 1)
0B99 C0CE      2518            push    ((_main_v_1_106 + 0x0004) + 2)
0B9B C0CF      2519            push    ((_main_v_1_106 + 0x0004) + 3)
0B9D C0C8      2520            push    _main_v_1_106
0B9F C0C9      2521            push    (_main_v_1_106 + 1)
0BA1 C0CA      2522            push    (_main_v_1_106 + 2)
0BA3 C0CB      2523            push    (_main_v_1_106 + 3)
0BA5 C098      2524            push    _main_halfPeriod_1_106
0BA7 C099      2525            push    (_main_halfPeriod_1_106 + 1)
0BA9 C09A      2526            push    (_main_halfPeriod_1_106 + 2)
0BAB C09B      2527            push    (_main_halfPeriod_1_106 + 3)
0BAD 7468      2528            mov     a,#__str_6
0BAF C0E0      2529            push    acc
0BB1 74D1      2530            mov     a,#(__str_6 >> 8)
0BB3 C0E0      2531            push    acc
0BB5 7480      2532            mov     a,#0x80
0BB7 C0E0      2533            push    acc
0BB9 120100    2534            lcall   _printf
0BBC E581      2535            mov     a,sp
0BBE 24F1      2536            add     a,#0xf1
0BC0 F581      2537            mov     sp,a
0BC2 D007      2538            pop     ar7
0BC4 D006      2539            pop     ar6
0BC6 D003      2540            pop     ar3
0BC8 D002      2541            pop     ar2
0BCA           2542   ;        D:\ELEC 291\Lab5\Lab5.c:462: sprintf (angle, "Phase=%1.1f RMS1=", phase);
0BCA C006      2543            push    ar6
0BCC C007      2544            push    ar7
0BCE C002      2545            push    ar2
0BD0 C003      2546            push    ar3
0BD2 74A8      2547            mov     a,#__str_7
0BD4 C0E0      2548            push    acc
0BD6 74D1      2549            mov     a,#(__str_7 >> 8)
0BD8 C0E0      2550            push    acc
0BDA 7480      2551            mov     a,#0x80
0BDC C0E0      2552            push    acc
0BDE 74E8      2553            mov     a,#_main_angle_1_106
0BE0 C0E0      2554            push    acc
0BE2 74BA      2555            mov     a,#(_main_angle_1_106 >> 8)
0BE4 C0E0      2556            push    acc
0BE6 E4        2557            clr     a
0BE7 C0E0      2558            push    acc
0BE9 120100    2559            lcall   _sprintf
0BEC E581      2560            mov     a,sp
0BEE 24F6      2561            add     a,#0xf6
0BF0 F581      2562            mov     sp,a
0BF2           2563   ;        D:\ELEC 291\Lab5\Lab5.c:463: sprintf (buff, "%1.2fV RMS2=%1.2fV", rms[0], rms[1]);
0BF2 C07C      2564            push    (_main_rms_1_106 + 0x0004)
0BF4 C07D      2565            push    ((_main_rms_1_106 + 0x0004) + 1)
0BF6 C07E      2566            push    ((_main_rms_1_106 + 0x0004) + 2)
0BF8 C07F      2567            push    ((_main_rms_1_106 + 0x0004) + 3)
0BFA C078      2568            push    _main_rms_1_106
0BFC C079      2569            push    (_main_rms_1_106 + 1)
0BFE C07A      2570            push    (_main_rms_1_106 + 2)
0C00 C07B      2571            push    (_main_rms_1_106 + 3)
0C02 7428      2572            mov     a,#__str_8
0C04 C0E0      2573            push    acc
0C06 74D2      2574            mov     a,#(__str_8 >> 8)
0C08 C0E0      2575            push    acc
0C0A 7480      2576            mov     a,#0x80
0C0C C0E0      2577            push    acc
0C0E 7498      2578            mov     a,#_main_buff_1_106
0C10 C0E0      2579            push    acc
0C12 74BA      2580            mov     a,#(_main_buff_1_106 >> 8)
0C14 C0E0      2581            push    acc
0C16 E4        2582            clr     a
0C17 C0E0      2583            push    acc
0C19 120100    2584            lcall   _sprintf
0C1C E581      2585            mov     a,sp
0C1E 24F2      2586            add     a,#0xf2
0C20 F581      2587            mov     sp,a
0C22           2588   ;        D:\ELEC 291\Lab5\Lab5.c:464: LCDprint(angle, 1, 1);
0C22 75E001    2589            mov     _LCDprint_PARM_2,#0x01
0C25 D260      2590            setb    _LCDprint_PARM_3
0C27 90BAE8    2591            mov     dptr,#_main_angle_1_106
0C2A 75F000    2592            mov     b,#0x00
0C2D 120100    2593            lcall   _LCDprint
0C30           2594   ;        D:\ELEC 291\Lab5\Lab5.c:465: LCDprint(buff, 2, 1);
0C30 75E002    2595            mov     _LCDprint_PARM_2,#0x02
0C33 D260      2596            setb    _LCDprint_PARM_3
0C35 90BA98    2597            mov     dptr,#_main_buff_1_106
0C38 75F000    2598            mov     b,#0x00
0C3B 120100    2599            lcall   _LCDprint
0C3E           2600   ;        D:\ELEC 291\Lab5\Lab5.c:466: waitms(2000);
0C3E 9007D0    2601            mov     dptr,#0x07D0
0C41 120100    2602            lcall   _waitms
0C44 020100    2603            ljmp    L023007?
0C47           2604            rseg R_CSEG
0C47           2605   
0000           2606            rseg R_XINIT
0000           2607   
0000           2608            rseg R_CONST
0000           2609   __str_0:
0000 1B        2610            db 0x1B
0001 5B324A    2611            db '[2J'
0004 0A        2612            db 0x0A
0005 00        2613            db 0x00
0006           2614   __str_1:
0006 41444320  2615            db 'ADC test program'
     74657374
     2070726F
     6772616D
0016 0A        2616            db 0x0A
0017 46696C65  2617            db 'File: %s'
     3A202573
001F 0A        2618            db 0x0A
0020 436F6D70  2619            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
0030 0A        2620            db 0x0A
0031 0A        2621            db 0x0A
0032 00        2622            db 0x00
0033           2623   __str_2:
0033 443A      2624            db 'D:'
0035 5C        2625            db 0x5C
0036 454C4543  2626            db 'ELEC 291'
     20323931
003E 5C        2627            db 0x5C
003F 4C616235  2628            db 'Lab5'
0043 5C        2629            db 0x5C
0044 4C616235  2630            db 'Lab5.c'
     2E63
004A 00        2631            db 0x00
004B           2632   __str_3:
004B 4D617220  2633            db 'Mar 12 2021'
     31322032
     303231
0056 00        2634            db 0x00
0057           2635   __str_4:
0057 31353A35  2636            db '15:51:17'
     313A3137
005F 00        2637            db 0x00
0060           2638   __str_5:
0060 524D5331  2639            db 'RMS1 =%1.2fV, RMS2 =%1.2fV, Phase =%1.1f, frequency =%3.2f'
     203D2531
     2E326656
     2C20524D
     5332203D
     25312E32
     66562C20
     50686173
     65203D25
     312E3166
     2C206672
     65717565
     6E637920
     3D25332E
     3266
009A 0D        2640            db 0x0D
009B 20        2641            db ' '
009C 0A        2642            db 0x0A
009D 00        2643            db 0x00
009E           2644   __str_6:
009E 2048616C  2645            db ' Half the period is %2.6f, Peak Voltage 1 =%2.6f, Peak Volta'
     66207468
     65207065
     72696F64
     20697320
     25322E36
     662C2050
     65616B20
     566F6C74
     61676520
     31203D25
     322E3666
     2C205065
     616B2056
     6F6C7461
00DA 67652032  2646            db 'ge 2 =%2.6f  '
     203D2532
     2E366620
     20
00E7 00        2647            db 0x00
00E8           2648   __str_7:
00E8 50686173  2649            db 'Phase=%1.1f RMS1='
     653D2531
     2E316620
     524D5331
     3D
00F9 00        2650            db 0x00
00FA           2651   __str_8:
00FA 25312E32  2652            db '%1.2fV RMS2=%1.2fV'
     66562052
     4D53323D
     25312E32
     6656
010C 00        2653            db 0x00
010D           2654   
0003           2655            CSEG
0003           2656   
0003           2657   end
